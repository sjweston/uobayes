f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7]) %>%
data.frame()
rbind(f[, , 1],
f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7]) %>%
data.frame() %>%
set_names(pull(nd, combination))
rbind(f[, , 1],
f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7]) %>%
data.frame()
rbind(f[, , 1],
f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7])
rbind(f[, , 1],
f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7]) %>%
data.frame()
rbind(f[, , 1],
f[, , 2],
f[, , 3],
f[, , 4],
f[, , 5],
f[, , 6],
f[, , 7])
f <- predicted_draws( m2 , newdata = nd )
View(f)
# what have we done?
f %>% str()
f %>%
mutate(across(action, contact, intention), as.character)
f %>%
as.data.frame()
f %>%
as.data.frame() %>%
mutate(across(c(action, contact, intention)),
as.character)
f %>%
as.data.frame() %>%
mutate(across(c(action, contact, intention)),
~as.character)
f %>%
as.data.frame() %>%
mutate(across(c(action, contact, intention),
~as.character))
f %>%
as.data.frame() %>%
mutate(across(c(action, contact, intention),
as.character))
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, response)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, prediction)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, .prediction)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=.n, fill=intention) )+
geom_bar( stat="identity" ) +
facet_grid(action~contact)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=n, fill=intention) )+
geom_bar( stat="identity" ) +
facet_grid(action~contact)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=n, fill=intention) )+
geom_bar( stat="identity", position="dodge" ) +
facet_grid(action~contact)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=n, fill=intention) )+
geom_bar( stat="identity", position="dodge" ) +
facet_grid(~action+contact)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character),
action  = str_c("action = ",  action),
contact = str_c("contact = ", contact)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=n, fill=intention) )+
geom_bar( stat="identity", position="dodge" ) +
facet_grid(~action+contact)
f %>%
as.data.frame() %>%
mutate(
across( c(action, contact, intention) ,
as.character),
action  = str_c("action = ",  action),
contact = str_c("contact = ", contact)) %>%
count(action, contact, intention, .prediction) %>%
ggplot( aes(x=.prediction, y=n, fill=intention) )+
geom_bar( stat="identity", position="dodge" ) +
facet_grid(~action+contact) +
labs( x="response",
y="count" )
#| code-fold: true
as_draws_df(m2) %>%
select(starts_with("b_")) %>%
select(-matches("[0-9]")) %>%
pivot_longer(everything()) %>%
mutate(
name = str_remove(name, "b_"),
name = str_replace(name, ":", " x ")
) %>%
ggplot( aes(x = value, y = name) ) +
geom_vline( aes(xintercept = 0), linetype = "dashed", alpha = .3 ) +
stat_dist_halfeye(fill = "#5e8485") +
scale_x_continuous("marginal posterior", breaks = -5:0 / 4) +
scale_y_discrete(NULL) +
coord_cartesian(xlim = c(-1.4, 0))
distinct(trolley, edu)
trolley <-
trolley %>%
mutate(edu_new =
recode(edu,
"Elementary School" = 1,
"Middle School" = 2,
"Some High School" = 3,
"High School Graduate" = 4,
"Some College" = 5,
"Bachelor's Degree" = 6,
"Master's Degree" = 7,
"Graduate Degree" = 8) %>%
as.integer())
?brm
m3 <-
brm(data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention + mo(edu_new),  # note the `mo()` syntax
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
# note the new kinds of prior statements
prior(normal(0, 0.143), class = b, coef = moedu_new),
prior(dirichlet(2, 2, 2, 2, 2, 2, 2), class = simo, coef = moedu_new1)),
iter = 2000, warmup = 1000, cores = 4, chains = 4, threads = 2,
seed = 12,
file = here("files/data/generated_data/m61.3"))
m3
m3 <-
brm(data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention + mo(edu_new),  # note the `mo()` syntax
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
# note the new kinds of prior statements
prior(normal(0, 0.143), class = b, coef = moedu_new),
prior(dirichlet(2, 2, 2, 2, 2, 2, 2), class = simo, coef = moedu_new1)),
iter = 2000, warmup = 1000, cores = 4, chains = 4,
seed = 12,
file = here("files/data/generated_data/m61.3"))
m3 <-
brm(data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention + mo(edu_new),  # note the `mo()` syntax
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
# note the new kinds of prior statements
prior(normal(0, 0.143), class = b, coef = moedu_new),
prior(dirichlet(2, 2, 2, 2, 2, 2, 2), class = simo, coef = moedu_new1)),
iter = 2000, warmup = 1000, cores = 4, chains = 4,
seed = 12,
file = here("files/data/generated_data/m61.3"))
m3
nd <- distinct(
trolley,
action, contact, intention, edu_new
)
View(nd)
predicted_draws(m3, nd)
predicted_draws(m3, nd) %>%
count(edu_new, .prediction)
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
group_by(edu_new, mutate, total = sum(n))
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
with_groups(edu_new, mutate, total = sum(n))
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
with_groups(c(edu_new, .row), mutate, total = sum(n))
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = .prediction/4000)
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000)
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000) %>%
ggplot(aes(x = .prediction,  y = pk)) +
geom_bar( stat="identity" ) +
facet_wrap(~edu_new)
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000,
.prediction = as.numeric(.prediction)) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000,
.prediction = as.numeric(.prediction),
edu_new = as.factor(edu_new)) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
predicted_draws(m3, nd) %>%
count(edu_new, .prediction) %>% View()
predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>% View()
predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>%
mutate(pk = n/4000,
.prediction = as.numeric(.prediction),
edu_new = as.factor(edu_new)) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>% View()
predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>%
with_groups(edu_new, mutate, total=sum(n))
mutate(pk = n/total,
.prediction = as.numeric(.prediction),
edu_new = as.factor(edu_new)) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>%
with_groups(edu_new, mutate, total=sum(n)) %>%
mutate(pk = n/total,
.prediction = as.numeric(.prediction),
edu_new = as.factor(edu_new)) %>%
ggplot(aes(x = .prediction,  y = pk, color = edu_new)) +
geom_point() +
geom_line()
labels(trolley$edu)
unique(trolley$edu)
levels(trolley$edu)
m1_mosquito <- brm(
data = mosquito_nets,
family = cumulative,
risk_category ~ 1,
prior = c(prior(normal(0, 1.5), class = Intercept)),
iter = 2000, warmup = 1000, cores = 4, chains = 4
)
data(mosquito_nets, package = 'rethinking')
??mosquito
# Load the data
data(mosquito_nets, package = "rethinking")
# Create ordered categories from malaria_risk
mosquito_nets <- mosquito_nets %>%
mutate(risk_category = case_when(
malaria_risk < 20 ~ 1,
malaria_risk < 40 ~ 2,
malaria_risk < 60 ~ 3,
malaria_risk < 80 ~ 4,
TRUE ~ 5
))
data(mosquito_nets, package = "rethinking")
# Load the data
data(net_data, package = "causalworkshop")
install.packages("causalworkshop")
# Load the data
data(net_data, package = "causalworkshop")
install.packages("pak")
pak::pak("r-causal/causalworkshop")
# Load the data
source("https://raw.githubusercontent.com/r-causal/causalworkshop/refs/heads/main/data-raw/net_data.R")
data(rain_rct, package = "rethinking")
data("gss_cat")
gss_cat
View(gss_cat)
#| code-fold: true
predicted_draws(m1, newdata = data.frame(1)) %>%
count(.prediction) %>%
mutate(pr_k = n / sum(n)) %>%
ggplot(aes(x = .prediction, y = pr_k)) +
geom_col(fill = "#e07a5f", alpha = 0.7) +
geom_point(data = trolley_plot, aes(x = response),
color = "#3d405b", size = 2) +
labs(x = "response",
y = "probability",
title = "Posterior Predictive Distribution") +
theme(plot.title = element_text(hjust = 0.5))
#| code-fold: true
predicted_draws(m1, newdata = data.frame(1)) %>%
count(.prediction) %>%
mutate(pr_k = n / sum(n)) %>%
ggplot(aes(x = .prediction, y = pr_k)) +
geom_col(fill = "#1c5253", alpha = 0.7) +
geom_point(data = trolley_plot, aes(x = response),
color = "#3d405b", size = 2) +
labs(x = "response",
y = "probability",
title = "Posterior Predictive Distribution") +
theme(plot.title = element_text(hjust = 0.5))
#| code-fold: true
predicted_draws(m1, newdata = data.frame(1)) %>%
count(.prediction) %>%
mutate(pr_k = n / sum(n)) %>%
ggplot(aes(x = .prediction, y = pr_k)) +
geom_col(fill = "#1c5253", alpha = 0.7) +
geom_point(data = trolley_plot, aes(x = response),
color = "#3d405b", size = 2) +
labs(x = "response",
y = "probability",
title = "Posterior Predictive Distribution")
#| code-fold: true
# Fit simpler model
m2_simple <- brm(
data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention,
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b)),
iter = 2000, warmup = 1000, cores = 4, chains = 4
)
#| code-fold: true
# Fit simpler model
m2_simple <- brm(
data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention,
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b)),
iter = 2000, warmup = 1000, cores = 4, chains = 4,
file=here("files/data/generated_data/m61.2simple")
)
# Compare coefficients
bind_rows(
fixef(m2) %>% as_tibble(rownames = "term"),
fixef(m2_simple) %>% as_tibble(rownames = "term")
) %>%
mutate(model = rep(c("with interactions", "main effects only"), each = n()/2)) %>%
ggplot(aes(x = term, y = Estimate, color = model)) +
geom_point() +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2) +
coord_flip() +
theme(legend.position = "top")
# Plot predictions
predicted_draws(m2_simple, newdata = nd) %>%
as.data.frame() %>%
mutate(
across(c(action, contact, intention), as.character),
facet_title = str_c("Action: ", action, "\nContact: ", contact)
) %>%
count(facet_title, intention, .prediction) %>%
ggplot(aes(x = .prediction, y = n, fill = intention)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~facet_title) +
scale_fill_brewer(palette = "Set2") +
labs(x = "response", y = "count")
#| code-fold: true
# Fit simpler model
m2_simple <- brm(
data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention,
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b)),
iter = 2000, warmup = 1000, cores = 4, chains = 4,
file=here("files/data/generated_data/m61.2simple")
)
# Compare coefficients
bind_rows(
fixef(m2) %>% as_tibble(rownames = "term"),
fixef(m2_simple) %>% as_tibble(rownames = "term")
) %>%
mutate(model = rep(c("with interactions", "main effects only"), each = n()/2)) %>%
ggplot(aes(x = term, y = Estimate, color = model)) +
geom_point() +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2) +
coord_flip() +
theme(legend.position = "top")
# Plot predictions
predicted_draws(m2_simple, newdata = nd) %>%
as.data.frame() %>%
mutate(
across(c(action, contact, intention), as.character),
facet_title = str_c("Action: ", action,
"\nContact: ", contact)
) %>%
count(facet_title, intention, .prediction) %>%
ggplot(aes(x = .prediction, y = n, fill = intention)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~facet_title) +
labs(x = "response", y = "count")
loo_compare(
loo(m2),
loo(m2_simple),
criterion = "loo"
) %>%
print(simplify = FALSE)
loo(m2)
m2  <-       add_criterion(m2,        "loo")
m2_simple <- add_criterion(m2_simple, "loo")
loo_compare(m2, m2_simple, criterion = "loo") %>%
print(simplify = F)
loo_compare(m2, m2_simple, criterion = "waic") %>%
print(simplify = F)
m2  <-       add_criterion(m2,        "waic")
m2_simple <- add_criterion(m2_simple, "waic")
loo_compare(m2, m2_simple, criterion = "waic") %>%
print(simplify = F)
loo_compare(m2, m2_simple, criterion = "psis") %>%
print(simplify = F)
#| code-fold: true
# Fit model with regular categorical education
m3_cat <- brm(
data = trolley,
family = cumulative,
response ~ 1 + action + contact + intention + edu,
prior = c(prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 1), class = b)),
iter = 2000, warmup = 1000, cores = 4, chains = 4,
file=here("files/data/generated_data/m61.3cat")
)
m3_cat
# Create predictions for both models
p1 <- predicted_draws(m3, nd) %>%
ungroup() %>%
count(edu_new, .prediction) %>%
with_groups(edu_new, mutate, total = sum(n)) %>%
mutate(pk = n/total,
.prediction = as.numeric(.prediction),
edu_new = as.factor(edu_new)) %>%
ggplot(aes(x = .prediction, y = pk, color = edu_new)) +
geom_point() +
geom_line() +
labs(x = "response", y = "probability", title = "Monotonic Model") +
theme(legend.position = "top")
p2 <- predicted_draws(m3_cat, newdata = distinct(trolley, action, contact, intention, edu)) %>%
ungroup() %>%
count(edu, .prediction) %>%
with_groups(edu, mutate, total = sum(n)) %>%
mutate(pk = n/total,
.prediction = as.numeric(.prediction)) %>%
ggplot(aes(x = .prediction, y = pk, color = edu)) +
geom_point() +
geom_line() +
labs(x = "response", y = "probability", title = "Categorical Model") +
theme(legend.position = "top")
# Combine plots
p1 + p2
