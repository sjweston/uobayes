y = density_data$y,
fill_group = ifelse(x < 0, "male", "female")  # Define fill condition
)
# Plot with area fill
p2 <- ggplot(density_df, aes(x = x, y = y, fill = fill_group)) +
geom_area() +  # Adjust transparency if needed
geom_line(linewidth = 1.2, color = "black") +  # Keep one continuous curve
labs(x = "Difference in weight (F-M)", y = "density") +
guides(fill = "none")
(p1 | p2)
posterior_table(m1)
test = posterior_table(m1)
str(test)
nd = data.frame(sex = factor(c("1", "2")))
predicted_draws(m1, newdata = nd)
nd = distinct(d, sex)
ned
nd
head(pred_post)
head(pred_all)
nd = distinct(d, sex)
pred_all = predicted_draws(object=m1, newdata=nd)
head(pred_all)
pred_all = predicted_draws(object=m1, newdata=nd) %>%
pivot_wider(names_from = sex, values_from = .prediction)
pred_all
pred_all = predicted_draws(object=m1, newdata=nd) %>% View()
pred_all = predicted_draws(object=m1, newdata=nd) %>%
select(-.row) %>%
pivot_wider(names_from = sex, values_from = .prediction)
head(pred_all)
pred_all = predicted_draws(object=m1, newdata=nd) %>%
ungroup %>% select(-.row) %>%
pivot_wider(names_from = sex, values_from = .prediction)
head(pred_all)
nd = distinct(d, sex)
pred_all = predicted_draws(object=m1, newdata=nd) %>%
ungroup %>% select(-.row) %>%
pivot_wider(names_from = sex, names_prefix = "sex", values_from = .prediction)
head(pred_all)
nd = distinct(d, sex)
pred_all = predicted_draws(object=m1, newdata=nd) %>%
ungroup %>% select(-.row) %>%
pivot_wider(names_from = sex, names_prefix = "sex", values_from = .prediction) %>%
mutate(diff = sex1-sex2)
head(pred_all)
#| code-fold: true
# plot distributions using the first version
p1 <- pred_post %>% pivot_longer(starts_with("pred")) %>%
mutate(sex = ifelse(name == "pred_f", "female", "male")) %>%
ggplot(aes(x = value, color = sex)) +
geom_density(linewidth = 2) +
labs(x = "weight (lbs)")
# plot difference distribution using the second version
# Compute density first
density_data <- density(pred_all$diff)
ggplot(pred_all, aes(x=diff)) +
geom_density()
source("~/.active-rstudio-document", echo=TRUE)
pred_all %>%
mutate(col = ifelse(diff < 0,"male","female")) %>%
ggplot(aes(x=diff,group=1)) +
geom_density(aes(fill=col))
source("~/.active-rstudio-document", echo=TRUE)
pred_all %>%
mutate(col = ifelse(diff < 0,"male","female")) %>%
ggplot(aes(x=diff)) +
geom_histogram(aes(y=..density.., fill=col), bins = 100)
# plot difference distribution using the second version
# Compute density first
density_data <- density(pred_all$diff)
# Convert to a tibble for plotting
density_df <- tibble(
x = density_data$x,
y = density_data$y,
fill_group = ifelse(x < 0, "male", "female")  # Define fill condition
)
# Plot with area fill
p2 <- ggplot(density_df, aes(x = x, y = y, fill = fill_group)) +
geom_area() +  # Adjust transparency if needed
geom_line(linewidth = 1.2, color = "black") +  # Keep one continuous curve
labs(x = "Difference in weight (F-M)", y = "density") +
guides(fill = "none")
(p1 | p2)
data("milk", package="rethinking")
str(milk)
milk$clade_id <- as.integer(milk$clade)
milk$clade_id <- as.factor(milk$clade_id)
milk$K <- standardize(milk$kcal.per.g)
m2 <- brm(
data=milk,
family=gaussian,
K ~ 0 + clade_id,
prior = c( prior(normal(0,.5), class=b),
prior(exponential(1), class=sigma)),
iter = 2000, warmup = 1000, seed = 3, chains=1,
file = here("files/models/22.2")
)
posterior_summary(m2)
as_draws_df(m2)
gather_draws(m2)
as_draws_df(m2) %>%
pivot_longer(starts_with("b"))
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(clade, "[0-9]")
)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]")
)
ste(milk)
str(milk)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = factor(clade, labels = levels(milk$clade))
)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = factor(clade, labels = levels(milk$clade))
) %>%
ggplot(y = clade, x = value) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = factor(clade, labels = levels(milk$clade))
)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
) %>%
ggplot(y = clade, x = value) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
# mutate(
#   clade = str_extract(name, "[0-9]"),
#   clade = as.numeric(clade)
# ) %>%
ggplot(y = name, x = value) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b"))
library(tidybayes)
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
# mutate(
#   clade = str_extract(name, "[0-9]"),
#   clade = as.numeric(clade)
# ) %>%
ggplot(y = name, x = value) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
# mutate(
#   clade = str_extract(name, "[0-9]"),
#   clade = as.numeric(clade)
# ) %>%
ggplot(y = name, x = value) +
tidybayes::stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
# mutate(
#   clade = str_extract(name, "[0-9]"),
#   clade = as.numeric(clade)
# ) %>%
ggplot(y = name, x = value) +
geom_point()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
) %>%
ggplot(y = clade, x = value) +
geom_point()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
) %>%
ggplot(aes(y = clade, x = value)) +
geom_point()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
) %>%
ggplot(aes(y = clade, x = value)) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade)
) %>%
ggplot(aes(y = clade, x = value)) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade),
clade = factor(clade, labels=levels(milk$clade))
) %>%
ggplot(aes(y = clade, x = value)) +
stat_halfeye()
as_draws_df(m2) %>%
pivot_longer(starts_with("b")) %>%
mutate(
clade = str_extract(name, "[0-9]"),
clade = as.numeric(clade),
clade = factor(clade, labels=levels(milk$clade))
) %>%
ggplot(aes(y = clade, x = value)) +
stat_halfeye() +
labs(x="mean", y=NULL)
source("~/.active-rstudio-document", echo=TRUE)
# Define the simulation function
simulate_growth <- function(ages) {
n = length(ages)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .3*age + 0.01*age^2,  # Quadratic growth pattern
sd = .1)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 1*age + 0.25*height, # Linear relationship with age and height
sd = 2)                           # Random variation
data.frame(age=ages, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
# Define the simulation function
simulate_growth <- function(age) {
n = length(age)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .3*age + 0.01*age^2,  # Quadratic growth pattern
sd = .1)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 1*age + 0.25*height, # Linear relationship with age and height
sd = 2)                           # Random variation
data.frame(age=age, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
sim_data
# Plot the simulated relationships
par(mfrow=c(2,1))
plot(sim_data$age, sim_data$height,
xlab="Age (years)", ylab="Height (cm)",
main="Age vs Height")
plot(sim_data$age, sim_data$weight,
xlab="Age (years)", ylab="Weight (kg)",
main="Age vs Weight")
# Define the simulation function
simulate_growth <- function(age) {
n = length(age)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .3*age + 0.01*age^2,  # Quadratic growth pattern
sd = .3)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 5*age + 0.25*height, # Linear relationship with age and height
sd = 2)                           # Random variation
data.frame(age=age, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
# Plot the simulated relationships
par(mfrow=c(2,1))
plot(sim_data$age, sim_data$height,
xlab="Age (years)", ylab="Height (feet)",
main="Age vs Height")
plot(sim_data$age, sim_data$weight,
xlab="Age (years)", ylab="Weight (lb)",
main="Age vs Weight")
# Define the simulation function
simulate_growth <- function(age) {
n = length(age)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .2*age + 0.01*age^2,  # Quadratic growth pattern
sd = .3)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 5*age + 0.25*height, # Linear relationship with age and height
sd = 2)                           # Random variation
data.frame(age=age, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
# Plot the simulated relationships
par(mfrow=c(2,1))
plot(sim_data$age, sim_data$height,
xlab="Age (years)", ylab="Height (feet)",
main="Age vs Height")
plot(sim_data$age, sim_data$weight,
xlab="Age (years)", ylab="Weight (lb)",
main="Age vs Weight")
# Define the simulation function
simulate_growth <- function(age) {
n = length(age)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .3*age + 0.005*age^2,  # Quadratic growth pattern
sd = .3)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 5*age + 0.25*height, # Linear relationship with age and height
sd = 2)                           # Random variation
data.frame(age=age, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
# Plot the simulated relationships
par(mfrow=c(2,1))
plot(sim_data$age, sim_data$height,
xlab="Age (years)", ylab="Height (feet)",
main="Age vs Height")
plot(sim_data$age, sim_data$weight,
xlab="Age (years)", ylab="Weight (lb)",
main="Age vs Weight")
# Define the simulation function
simulate_growth <- function(age) {
n = length(age)
# Simulate height (in feet)
height <- rnorm(n,
mean = 1.5 + .3*age + 0.005*age^2,  # Quadratic growth pattern
sd = .3)                           # Random variation
# Simulate weight (in lb)
weight <- rnorm(n,
mean = 6.5 + 5*age + 0.25*height, # Linear relationship with age and height
sd = 4)                           # Random variation
data.frame(age=age, height=height, weight=weight)
}
# Generate data for ages 0-12
ages <- runif(100, 0, 12)
sim_data = simulate_growth(ages)
# Plot the simulated relationships
par(mfrow=c(2,1))
plot(sim_data$age, sim_data$height,
xlab="Age (years)", ylab="Height (feet)",
main="Age vs Height")
plot(sim_data$age, sim_data$weight,
xlab="Age (years)", ylab="Weight (lb)",
main="Age vs Weight")
# Load required packages
library(brms)
data("Howell1", package="rethinking")
# Filter for children under 13
d <- Howell1[Howell1$age < 13,]
# center height variables
d$height_c <- d$height - mean(d$height)
# Define the model
m <- brm(
weight ~ age + height_c,
data = d,
prior = c(
prior(normal(7, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma)
),
sample_prior = "only"  # First get prior samples
)
# Define the model
mp <- brm(
weight ~ age + height_c,
data = d,
prior = c(
prior(normal(7, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma)
),
sample_prior = "only"  # First get prior samples
)
# Get prior samples
prior_samples <- posterior_samples(mp)
# Get prior samples
prior_samples <- as_draws_df(mp)
# Now fit the model with the data
m <- brm(
weight ~ age + height_c,
data = d,
prior = c(
prior(normal(7, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma)
)
)
library(tidyverse)
ggplot(d, aes(x=age, y=weight)) +
geom_blank
ggplot(d, aes(x=age, y=weight)) +
geom_blank()
prior_samples
# Define the model
mp <- brm(
weight ~ age,
data = d,
prior = c(
prior(normal(7, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma)
),
sample_prior = "only"  # First get prior samples
)
# Get prior samples
prior_samples <- as_draws_df(mp)
# Now fit the model with the data
m <- brm(
weight ~ age,
data = d,
prior = c(
prior(normal(7, 1.5), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma)
)
)
# Get posterior samples
post_samples <- as_draws_df(m)
ggplot(d, aes(x=age, y=weight)) +
geom_blank() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=prior_samples[1:50, ],
alpha=.2)
ggplot(d, aes(x=age, y=weight)) +
geom_point(chr=1) +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=posterior_samples[1:50, ],
alpha=.2)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=2) +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=posterior_samples[1:50, ],
alpha=.2)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=2)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=1)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=3)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=4)
ggplot(d, aes(x=age, y=weight)) +
geom_point(shape=5)
ggplot(d, aes(x=age, y=weight)) +
geom_point(fill="black")
ggplot(d, aes(x=age, y=weight)) +
geom_point()
ggplot(d, aes(x=age, y=weight)) +
geom_point() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=posterior_samples[1:50, ],
alpha=.2)
ggplot(d, aes(x=age, y=weight)) +
geom_point() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=post_samples[1:50, ],
alpha=.2)
(p1 | p2)
p1 <- ggplot(d, aes(x=age, y=weight)) +
geom_blank() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=prior_samples[1:50, ],
alpha=.2)
p2 <- ggplot(d, aes(x=age, y=weight)) +
geom_point() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=post_samples[1:50, ],
alpha=.2)
library(patchwork)
(p1 | p2)
library(cowplot)
p1 <- ggplot(d, aes(x=age, y=weight)) +
geom_blank() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=prior_samples[1:50, ],
alpha=.2)
p2 <- ggplot(d, aes(x=age, y=weight)) +
geom_point() +
geom_abline(aes(intercept=b_Intercept, slope=b_age),
data=post_samples[1:50, ],
alpha=.2)
library(patchwork)
(p1 | p2)
