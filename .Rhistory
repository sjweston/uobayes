naive_model <- lm(Y ~ X, data = data)
adjusted_model <- lm(Y ~ X + Z, data = data)
# Return results
list(
naive_effect = coef(naive_model)["X"],
adjusted_effect = coef(adjusted_model)["X"],
true_effect = 0,
data = data,
naive_model = naive_model,
adjusted_model = adjusted_model
)
}
# Run simulation multiple times
run_multiple_sims <- function(n_sims = 100) {
results <- replicate(n_sims, {
sim <- simulate_confounding()
c(naive = sim$naive_effect,
adjusted = sim$adjusted_effect)
})
# Convert to data frame
results_df <- data.frame(
naive = results[1,],
adjusted = results[2,]
)
# Plot results
par(mfrow = c(1, 2))
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue")
abline(v = 0, col = "red", lwd = 2)
hist(results_df$adjusted, main = "Adjusted Estimates",
xlab = "Estimated Effect", col = "lightgreen")
abline(v = 0, col = "red", lwd = 2)
# Return summary statistics
list(
naive_mean = mean(results_df$naive),
adjusted_mean = mean(results_df$adjusted),
naive_sd = sd(results_df$naive),
adjusted_sd = sd(results_df$adjusted)
)
}
# Example usage:
sim_result <- simulate_confounding()
print("Single simulation results:")
print(paste("Naive effect:", round(sim_result$naive_effect, 3)))
print(paste("Adjusted effect:", round(sim_result$adjusted_effect, 3)))
print(paste("True effect:", sim_result$true_effect))
# Run multiple simulations
multi_results <- run_multiple_sims(100)
print("\nMultiple simulation results:")
print(multi_results)
N = 1000
seed = 42
set.seed(seed)
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
# Create data frame
data <- data.frame(X = X, Y = Y, Z = Z)
# Fit models
naive_model <- lm(Y ~ X, data = data)
adjusted_model <- lm(Y ~ X + Z, data = data)
naive_effect = coef(naive_model)["X"]
adjusted_effect = coef(adjusted_model)["X"]
simulate_confounding <- function(N = 1000, seed = 42) {
set.seed(seed)
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
# Create data frame
data <- data.frame(X = X, Y = Y, Z = Z)
# Fit models
naive_model <- lm(Y ~ X, data = data)
adjusted_model <- lm(Y ~ X + Z, data = data)
# Return results
list(
naive_effect = coef(naive_model)["X"],
adjusted_effect = coef(adjusted_model)["X"],
true_effect = 0,
data = data,
naive_model = naive_model,
adjusted_model = adjusted_model
)
}
simulate_confounding <- function(N = 1000) {
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
# Create data frame
data <- data.frame(X = X, Y = Y, Z = Z)
# Fit models
naive_model <- lm(Y ~ X, data = data)
adjusted_model <- lm(Y ~ X + Z, data = data)
# Return results
list(
naive_effect = coef(naive_model)["X"],
adjusted_effect = coef(adjusted_model)["X"],
true_effect = 0,
data = data,
naive_model = naive_model,
adjusted_model = adjusted_model
)
}
# Run simulation multiple times
run_multiple_sims <- function(n_sims = 100) {
results <- replicate(n_sims, {
sim <- simulate_confounding()
c(naive = sim$naive_effect,
adjusted = sim$adjusted_effect)
})
# Convert to data frame
results_df <- data.frame(
naive = results[1,],
adjusted = results[2,]
)
# Plot results
par(mfrow = c(1, 2))
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue")
abline(v = 0, col = "red", lwd = 2)
hist(results_df$adjusted, main = "Adjusted Estimates",
xlab = "Estimated Effect", col = "lightgreen")
abline(v = 0, col = "red", lwd = 2)
# Return summary statistics
list(
naive_mean = mean(results_df$naive),
adjusted_mean = mean(results_df$adjusted),
naive_sd = sd(results_df$naive),
adjusted_sd = sd(results_df$adjusted)
)
}
# Example usage:
sim_result <- simulate_confounding()
print("Single simulation results:")
print(paste("Naive effect:", round(sim_result$naive_effect, 3)))
print(paste("Adjusted effect:", round(sim_result$adjusted_effect, 3)))
print(paste("True effect:", sim_result$true_effect))
# Run multiple simulations
multi_results <- run_multiple_sims(100)
print("\nMultiple simulation results:")
print(multi_results)
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue")
n_sims = 100
results <- replicate(n_sims, {
sim <- simulate_confounding()
c(naive = sim$naive_effect,
adjusted = sim$adjusted_effect)
})
# Convert to data frame
results_df <- data.frame(
naive = results[1,],
adjusted = results[2,]
)
results_df
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue")
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue",
xlim = c(-.05, max(results_df$naive + .1)))
range(results_df$naive)
maxx = max(c(results_df$naive, results_df$adjusted))
maxx = max(c(results_df$naive, results_df$adjusted)) + .05
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue",
xlim = c(-.05, maxx))
## Simulation 1: Simple Confounding
# True causal effect of X on Y is 0, but confounded by U
simulate_confounding <- function(N = 1000) {
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
# Create data frame
data <- data.frame(X = X, Y = Y, Z = Z)
# Fit models
naive_model <- lm(Y ~ X, data = data)
adjusted_model <- lm(Y ~ X + Z, data = data)
# Return results
list(
naive_effect = coef(naive_model)["X"],
adjusted_effect = coef(adjusted_model)["X"],
true_effect = 0,
data = data,
naive_model = naive_model,
adjusted_model = adjusted_model
)
}
# Run simulation multiple times
run_multiple_sims <- function(n_sims = 100) {
results <- replicate(n_sims, {
sim <- simulate_confounding()
c(naive = sim$naive_effect,
adjusted = sim$adjusted_effect)
})
# Convert to data frame
results_df <- data.frame(
naive = results[1,],
adjusted = results[2,]
)
# Plot results
par(mfrow = c(1, 2))
maxx = max(c(results_df$naive, results_df$adjusted)) + .05
hist(results_df$naive, main = "Naive Estimates",
xlab = "Estimated Effect", col = "lightblue",
xlim = c(-.05, maxx))
abline(v = 0, col = "red", lwd = 2)
hist(results_df$adjusted, main = "Adjusted Estimates",
xlab = "Estimated Effect", col = "lightgreen",
xlim = c(-.05, maxx))
abline(v = 0, col = "red", lwd = 2)
# Return summary statistics
list(
naive_mean = mean(results_df$naive),
adjusted_mean = mean(results_df$adjusted),
naive_sd = sd(results_df$naive),
adjusted_sd = sd(results_df$adjusted)
)
}
# Example usage:
sim_result <- simulate_confounding()
print("Single simulation results:")
print(paste("Naive effect:", round(sim_result$naive_effect, 3)))
print(paste("Adjusted effect:", round(sim_result$adjusted_effect, 3)))
print(paste("True effect:", sim_result$true_effect))
# Run multiple simulations
multi_results <- run_multiple_sims(100)
print("\nMultiple simulation results:")
print(multi_results)
# Plot results
results_df %>%
pivot_longer(everything())
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram() +
geom_vline(aes(xintercept = 0))
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram(color = "white") +
geom_vline(aes(xintercept = 0))
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram(color = "white") +
geom_vline(aes(xintercept = 0)) +
facet_wrap(~name, nrow=1)
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram(color = "white") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
facet_wrap(~name, nrow=1)
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram(color = "white") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
facet_wrap(~name, nrow=1) +
guides(fill = F)
# Plot results
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_histogram(color = "white") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
facet_wrap(~name, ncol=1) +
guides(fill = F)
#===========================================
# 1. Precision Parasite Simulation
#===========================================
simulate_precision_parasite <- function(n = 100, bZX = 1) {
# Z affects X but is not a confounder
Z <- rnorm(n)
X <- rnorm(n, mean = bZX * Z)
Y <- rnorm(n, mean = X)  # True effect of X on Y is 1
# Fit models
model1 <- lm(Y ~ X)
model2 <- lm(Y ~ X + Z)
# Return standard errors
return(c(
se_without_Z = summary(model1)$coefficients["X", "Std. Error"],
se_with_Z = summary(model2)$coefficients["X", "Std. Error"]
))
}
# Run multiple simulations
precision_results <- replicate(1000, simulate_precision_parasite())
precision_results
#===========================================
# 2. Bias Amplification Simulation
#===========================================
simulate_bias_amplification <- function(n = 100, conf_strength = 1) {
# U is unmeasured confounder
U <- rnorm(n)
Z <- rnorm(n)
X <- rnorm(n, mean = Z + conf_strength * U)
Y <- rnorm(n, mean = conf_strength * U)  # No true effect of X
# Fit models
model1 <- lm(Y ~ X)
model2 <- lm(Y ~ X + Z)
return(c(
coef_without_Z = coef(model1)["X"],
coef_with_Z = coef(model2)["X"]
))
}
# Run multiple simulations
bias_results <- replicate(1000, simulate_bias_amplification())
#===========================================
# Visualization Functions
#===========================================
plot_precision_results <- function(results) {
# Compare distributions of standard errors
data.frame(
se_without_Z = results[1,],
se_with_Z = results[2,]
) %>%
gather(key = "model", value = "standard_error") %>%
ggplot(aes(x = standard_error, fill = model)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = "Impact of Precision Parasite on Standard Errors",
x = "Standard Error of X coefficient",
y = "Density")
}
plot_bias_results <- function(results) {
data.frame(
est_without_Z = results[1,],
est_with_Z = results[2,]
) %>%
gather(key = "model", value = "coefficient") %>%
ggplot(aes(x = coefficient, fill = model)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = "Impact of Bias Amplification",
x = "Estimated Effect of X",
y = "Density") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red")
}
# Example usage:
plot_precision_results(precision_results)
plot_bias_results(bias_results)
#===========================================
# Interactive Analysis Function
#===========================================
analyze_controls <- function(n = 100, conf_strength = 1, n_sims = 100) {
# Run both types of simulations
precision_results <- replicate(n_sims,
simulate_precision_parasite(n = n))
bias_results <- replicate(n_sims,
simulate_bias_amplification(n = n,
conf_strength = conf_strength))
# Summarize results
list(
precision = list(
mean_se_without_Z = mean(precision_results[1,]),
mean_se_with_Z = mean(precision_results[2,]),
relative_efficiency = mean(precision_results[1,])/mean(precision_results[2,])
),
bias = list(
mean_est_without_Z = mean(bias_results[1,]),
mean_est_with_Z = mean(bias_results[2,]),
bias_ratio = abs(mean(bias_results[2,]))/abs(mean(bias_results[1,]))
)
)
}
---
title: "Week 3: Causes, Confounds, and Colliders"
# Run multiple simulations
precision_results <- replicate(1000, simulate_precision_parasite(n = 50))
plot_precision_results <- function(results) {
# Compare distributions of standard errors
data.frame(
se_without_Z = results[1,],
se_with_Z = results[2,]
) %>%
gather(key = "model", value = "standard_error") %>%
ggplot(aes(x = standard_error, fill = model)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = "Impact of Precision Parasite on Standard Errors",
x = "Standard Error of X coefficient",
y = "Density")
}
plot_precision_results(precision_results)
#| code-fold: true
#number of sims
N = 1000
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
# Fit models
naive_model <- lm(Y ~ X)
adjusted_model <- lm(Y ~ X + Z)
d <- data.frame(X, Y, Z)
m32.1 <- quap(flist, d)
N = 1000
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
d <- data.frame(X, Y, Z)
# Fit models
flist <- alist(
Y ~ dnorm(mu, sigma)
mu = a + bX*X
# Fit models
flist <- alist(
Y ~ dnorm(mu, sigma),
mu = a + bX*X,
a ~ dnorm(0, .5),
bX ~ dnorm(0, .25),
sigma ~ dexp(1)
)
m32.1 <- quap(flist, d)
# Fit models
flist <- alist(
Y ~ dnorm(mu, sigma),
mu <- a + bX*X,
a ~ dnorm(0, .5),
bX ~ dnorm(0, .25),
sigma ~ dexp(1)
)
m32.1 <- quap(flist, d)
precis(m32.1)
m32.2 <- quap(flist, d)
precis(m32.2)
# Fit models
flist <- alist(
Y ~ dnorm(mu, sigma),
mu <- a + bX*X +bZ*Z,
a ~ dnorm(0, .5),
bX ~ dnorm(0, .25),
bZ ~ dnorm(0, .25),
sigma ~ dexp(1)
)
m32.2 <- quap(flist, d)
precis(m32.2)
extract.samples(m32.1)
results_df = data.frame(naive = post.1$bX,
adjusted = post2$bX)
post.1 <- extract.samples(m32.1)
post.2 <- extract.samples(m32.2)
results_df = data.frame(naive = post.1$bX,
adjusted = post2$bX)
results_df = data.frame(naive = post.1$bX,
adjusted = post.2$bX)
results_df %>%
pivot_longer(everything())
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_density(alpha = .5)
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_density(alpha = .5) +
geom_vline(aes(xintercept = 0), linetype = "dashed")
#| code-fold: true
#number of sims
N = 1000
# Generate data
U <- rnorm(N)  # Unobserved confounder
X <- rnorm(N, mean = 0.5 * U)  # Treatment affected by U
Y <- rnorm(N, mean = 0.8 * U)  # Outcome affected by U
Z <- rnorm(N, mean = 0.6 * U)  # Observed variable that captures U
d <- data.frame(X, Y, Z)
# Fit models
flist1 <- alist(
Y ~ dnorm(mu, sigma),
mu <- a + bX*X,
a ~ dnorm(0, .5),
bX ~ dnorm(0, .25),
sigma ~ dexp(1)
)
m32.1 <- quap(flist1, d)
precis(m32.1)
# Fit models
flist2 <- alist(
Y ~ dnorm(mu, sigma),
mu <- a + bX*X +bZ*Z,
a ~ dnorm(0, .5),
bX ~ dnorm(0, .25),
bZ ~ dnorm(0, .25),
sigma ~ dexp(1)
)
m32.2 <- quap(flist2, d)
precis(m32.2)
post.1 <- extract.samples(m32.1)
post.2 <- extract.samples(m32.2)
results_df = data.frame(naive = post.1$bX,
adjusted = post.2$bX)
results_df %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, fill = name)) +
geom_density(alpha = .5) +
geom_vline(aes(xintercept = 0), linetype = "dashed")
View(results_df)
