weight ~ height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( lognormal(1,2), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
file = here("fits/m42.2"))
# Chunk 27
summary(m42.2)
# Chunk 28
post_draws = m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma) %>%
sample_n(50)
m_height <- mean(d$height)
d %>%
ggplot(aes(x = height, y = weight)) +
geom_point(alpha = .5) +
geom_abline(aes(intercept = b_Intercept - b_height_c*m_height, #to account for centering
slope = b_height_c),
alpha = .3,
color = "#1c5253",
data = post_draws)
# Chunk 29
data("msleep")
d_sleep <- msleep %>%
drop_na(sleep_total, bodywt) %>%
mutate(log_weight = log(bodywt))
# Quick look at the data
describe(d_sleep[c("sleep_total", "bodywt", "log_weight")], fast = T)
# Chunk 30
m_sleep_prior <- brm(
data = d_sleep,
family = gaussian,
sleep_total ~ log_weight,
prior = c(
prior(normal(12, 4), class = Intercept),
prior(normal(0, 2), class = b),
prior(uniform(0, 10), class = sigma)
),
sample_prior = "only",
seed = 123
)
# Chunk 31
#| code-fold: true
p_sleep_p <- m_sleep_prior %>%
spread_draws(b_Intercept, b_log_weight, sigma)
d_sleep %>%
ggplot(aes(x = log_weight, y = sleep_total)) +
geom_blank()+
geom_abline(aes( intercept=b_Intercept, slope=b_log_weight),
data = p_sleep_p[1:50, ], #first 50 draws only
color = "#1c5253",
alpha = .3) +
labs(
x = "weight (log)",
y = "sleep"
)
# Chunk 32
m_sleep_fit <- brm(
data = d_sleep,
family = gaussian,
sleep_total ~ log_weight,
prior = c(
prior(normal(12, 4), class = Intercept),
prior(normal(0, 2), class = b),
prior(uniform(0, 10), class = sigma)
),
seed = 123,
file = here("fits/m2.sleep")
)
summary(m_sleep_fit)
# Chunk 33
pp_check(m_sleep_fit)
# Chunk 34
#| code-fold: true
p_sleep <- m_sleep_fit %>%
spread_draws(b_Intercept, b_log_weight, sigma)
d_sleep %>%
ggplot(aes(x = log_weight, y = sleep_total)) +
geom_point()+
geom_abline(aes( intercept=b_Intercept, slope=b_log_weight),
data = p_sleep_p[1:50, ], #first 50 draws only
color = "#1c5253",
alpha = .3) +
labs(
x = "weight (log)",
y = "sleep"
)
# Chunk 35
m42.2 %>%
gather_draws(b_Intercept, b_height_c, sigma)   %>%
sample_n(2)
# Chunk 36
m42.2 %>%
gather_draws(b_Intercept, b_height_c, sigma) %>%
median_qi()
# Chunk 37: m42.2-halfeye
m42.2 %>%
gather_draws(b_Intercept, b_height_c, sigma) %>%
ggplot(aes(x = .value, y=.variable)) +
stat_halfeye()
# Chunk 38
# simulate new data
height_c = sample(d$height_c, size = 1e2, replace = T)
# get predictions
predictions = data.frame(height_c) %>% add_predicted_draws(m42.2, seed = 1)
dim(predictions)
head(predictions)
# Chunk 39
# get expected values
expected_vals = data.frame(height_c) %>% add_epred_draws(m42.2, seed = 1)
dim(expected_vals)
head(expected_vals)
# Chunk 40
predictions %>% full_join(expected_vals) %>%
pivot_longer(c(.prediction, .epred)) %>%
ggplot(aes(x=value, group = name)) +
geom_density(aes(fill=name), alpha=.5)
# Chunk 41
predictions %>% full_join(expected_vals) %>%
pivot_longer(c(.prediction, .epred)) %>%
sample_n(size = 200) %>%
mutate(height = height_c + m_height) %>%
ggplot(aes(x=height, y=value, group = name)) +
geom_point(alpha = .3) +
facet_wrap(~name)
# Chunk 42
p_sleep %>%
gather_draws(b_Intercept, b_log_weight, sigma) %>%
median_qi
# Chunk 43
log_weight = sample(d_sleep$log_weight, replace = T, size = 10)
predictions = data.frame(log_weight) %>% add_predicted_draws(m_sleep_fit, seed = 1)
head(predictions)
predictions %>%
ggplot(aes(x = .prediction)) +
geom_density(aes(x = sleep_total), data = msleep) +
geom_histogram(aes(y = ..density..), fill = "#1c5253", color = "white", alpha = .3)
psis(m42.2)
psis(m42.2)
loo(m42.2)
loo(m42.2, pointwise = T)
psis_42.2 = loo(m42.2, pointwise = T)
str(psis_42.2)
waic(m42.2)
loo_compare(m42.1, m42.2)
loo_compare(m42.1, m42.2, criterion = "waic")
?loo_compare
install.packages("diagnostics")
library(loo)
pareto_k_values(m42.2)
psis(m42.2)
psis_42.2 = psis(m42.2, pointwise = T)
psis_42.2 = psis(m42.2)
pareto_k_values(psis_42.2)
plot(psis_42.2, diagnostic = "k")
plot(psis_42.2, diagnostic = "k", label_points = T)
# get values for each point
head(pareto_k_values(psis_42.2))
loo1 <- loo(m42.2, save_psis = T)
loo1
waic(m42.2)
waic(m42.2)
m42.1
m42.2
waic(m42.2)
N <- 1000 # number of applicants
# even gender distribution
G <- sample( 1:2, size=N, replace=TRUE )
# gender 1 tends to apply to department 1, 2 to 2
D <- rbinom( n=N, size=1, prob=ifelse( G==1 , 0.3 , 0.8 ) ) + 1
table(G,D)
# matrix of acceptance rates
accept_rate <- matrix( c(0.5, 0.2, 0.1, 0.3), nrow=2)
# simulate acceptance
A <- rbinom( n=N, size=1, accept_rate[D,G])
A
dat <- data.frame(D, G, A)
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms)
library(tidybayes)
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3: entropy-viz
#| code-fold: true
#|
# Create example data
set.seed(123)
# Low entropy data (concentrated around a single value)
low_entropy <- data.frame(
value = sample(x = c(1:6), 10000, replace = T, prob = c(.3, .25, .2, .1, .05, 0)),
type = "Low Entropy"
)
# High entropy data (more spread out, more uniform)
high_entropy <- data.frame(
value = sample(x = c(1:6), 10000, replace = T),
type = "High Entropy"
)
# Combine the data
entropy_data <- rbind(low_entropy, high_entropy)
# Create the plots
ggplot(entropy_data, aes(x = value)) +
geom_histogram(fill = "#1c5253", alpha = 0.5, binwidth = 1, color = "white") +
facet_wrap(~type) +
labs(title = "Comparing High and Low Entropy Distributions",
x = "Value",
y = "Density") +
theme_cowplot() +
theme(strip.background = element_rect(fill = "#1c5253"),
strip.text = element_text(color = "white", size = 12))
# Chunk 4: exponential-viz
#| code-fold: true
# Create data for different rate parameters
x <- seq(0, 5, length.out = 1000)
rates <- c(0.5, 1, 2)
exp_data <- expand.grid(x = x, rate = rates) %>%
mutate(density = dexp(x, rate),
rate = factor(rate, labels = paste("λ =", rates)))
ggplot(exp_data, aes(x = x, y = density, color = rate)) +
geom_line(size = 1) +
labs(title = "Exponential Distribution with Different Rate Parameters",
x = "x",
y = "Density",
color = "Rate") +
theme_cowplot() +
scale_color_manual(values = c("#1c5253", "#5e8485", "#0f393a"))
# Chunk 5: gamma-viz
#| code-fold: true
# Create data for different shape parameters
x <- seq(0, 10, length.out = 1000)
shapes <- list(c(1, 1), c(2, 2), c(5, 1))
names <- c("a=1, b=1", "a=2, b=2", "a=5, b=1")
gamma_data <- map_df(seq_along(shapes), function(i) {
data.frame(
x = x,
density = dgamma(x, shape = shapes[[i]][1], rate = shapes[[i]][2]),
params = names[i]
)
})
ggplot(gamma_data, aes(x = x, y = density, color = params)) +
geom_line(size = 1) +
labs(title = "Gamma Distribution with Different Shape and Rate Parameters",
x = "x",
y = "Density",
color = "Parameters") +
theme_cowplot() +
scale_color_manual(values = c("#1c5253", "#5e8485", "#0f393a"))
# Chunk 6: poisson-viz
#| code-fold: true
# Create data for different lambda parameters
x <- 0:15
lambdas <- c(1, 3, 7)
pois_data <- expand.grid(x = x, lambda = lambdas) %>%
mutate(probability = dpois(x, lambda),
lambda = factor(lambda, labels = paste("λ =", lambdas)))
ggplot(pois_data, aes(x = x, y = probability, fill = lambda)) +
geom_col(position = "dodge", alpha = 0.7) +
labs(title = "Poisson Distribution with Different Rate Parameters",
x = "Count",
y = "Probability",
fill = "Lambda") +
theme_cowplot() +
scale_fill_manual(values = c("#1c5253",  "#e07a5f", "#f2cc8f"))
# Chunk 7
#| file: "scripts/sim_gender_dept.R"
# Chunk 8
dat <- data.frame(D, G, A)
#| file: "scripts/sim_gender_dept.R"
source(here("scripts/sim_gender_dept.R"))
source(here("lectures/scripts/sim_gender_dept.R"))
dat <- data.frame(D, G, A)
m1 = brm(
data = dat,
family = binomial,
)
get_prior(formula = A ~ 0 + G, data = dat)
get_prior(formula = A ~ 0 + G, family = binomial, data = dat)
m1 = brm(
data = dat,
family = binomial,
A ~ 0 + G,
prior = c( prior( normal(0, 10), class = Intercept),
prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m51.1")
)
m1 = brm(
data = dat,
family = binomial,
A ~ 0 + G,
prior = c( prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m51.1")
)
m1 = brm(
data = dat,
family = binomial,
A | trials(1) ~ 0 + G,
prior = c( prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m51.1")
)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 0 + G,
prior = c( prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m51.1")
)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 0 + G,
prior = c( prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m51.1")
)
m1
m1 = brm(
data = dat,
family = bernoulli,
bf(
A  ~ a + b,
a ~ 1,
b ~ 0 + G,
nl = T),
prior = c( prior( normal(0, 10), class = a),
prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1 = brm(
data = dat,
family = bernoulli,
bf(
A ~ a + b,
a ~ 1,
b ~ 0 + G,
nl = T),
prior = c( prior( normal(0, 10), class = a),
prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1 = brm(
data = dat,
family = bernoulli,
bf(A ~ a + b,
a ~ 1,
b ~ 0 + G,
nl = T),
prior = c( prior( normal(0, 10), class = a),
prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1 = brm(
data = dat,
family = bernoulli,
bf(A ~ a + b,
a ~ 1,
b ~ 0 + G,
nl = T),
prior = c( prior( normal(0, 10), nlpar = a),
prior( normal(0, 10), nlpar = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1
m1 = brm(
data = dat,
family = bernoulli,
bf(A ~ a + b,
a ~ 1,
b ~ 0 + G,
nl = T),
prior = c( prior( normal(0, 10), nlpar = a),
prior( normal(0, 10), nlpar = b, coef = G1),
prior( normal(0, 10), nlpar = b, coef = G2)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 1 + (1 | G ),
prior = c( prior( normal(0, 10), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 1 + (1 | G ),
prior = c( prior( normal(0, 10), class = Intercept)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 1 + (1 | G ),
prior = c( prior( normal(0, 1), class = Intercept)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1
get_variables(m1)
m1 %>% spread_draws("r_G[1,Intercept]", "r_G[2,Intercept]")
m1 %>% spread_draws()
m1 %>% spread_draws(r_G)
dat <- data.frame(D, as.character(G), A)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 1 + (1 | G ),
prior = c( prior( normal(0, 1), class = Intercept)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
dat <- data.frame(D, G=as.character(G), A)
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 1 + (1 | G ),
prior = c( prior( normal(0, 1), class = Intercept)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1
m1 = brm(
data = dat,
family = bernoulli,
A  ~ 0 + G,
prior = c( prior( normal(0, 1), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m1
dat <- data.frame(D=as.character(D), G=as.character(G), A)
m2 = brm(
data = dat,
family = bernoulli,
A  ~ 0 + G + D,
prior = c( prior( normal(0, 1), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m2
str(dat)
m2 = brm(
data = dat,
family = bernoulli,
A  ~ 0 + G*D,
prior = c( prior( normal(0, 1), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m2
get_variables(m2)
m2 %>% add_epred_draws(dat)
m2 %>% add_epred_draws(newdata = dat)
m2 = brm(
data = dat,
family = bernoulli,
A  ~ G*D,
prior = c( prior( normal(0, 1), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3
)
m2
m2 = brm(
data = dat,
family = bernoulli,
A  ~ G*D,
prior = c( prior( normal(0, 1), class = Intercept),
prior( normal(0, 1), class = b)),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file=here("fits/m5.2")
)
new_dat = expand.grid(G = c("1", "2"),
D = c("1", "2"))
m1 %>% add_epred_draws(newdata = new_dat)
m1 %>% add_epred_draws(newdata = new_dat) %>%
median_qi
m2 %>% add_epred_draws(newdata = new_dat) %>%
median_qi
