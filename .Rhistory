group_by(treatment) %>%
median_qi(fitted)
avg_chimp
#| code-fold: true
f %>%
ggplot( aes(x=treatment, y=Estimate, group=1) ) +
geom_ribbon(aes( ymin=Q2.5, ymax=Q97.5 ),
fill = "#0f393a",
alpha=.3) +
geom_point( aes(y=p),
data=obs,
shape=1) +
geom_line(color="#0f393a") +
geom_ribbon(aes( x=treatment, ymin=.lower, ymax=.upper ),
alpha=.3,
fill="#e07a5f",
data=avg_chimp,
inherit.aes = F) +
geom_line( aes(y=fitted), data=avg_chimp, color ="#e07a5f") +
geom_line(color="#0f393a") +
facet_wrap(~actor)
post %>%
slice_sample(n=100) %>%
# simulate chimps
mutate(a_sim = rnorm(n(), mean = b_a_Intercept, sd = sd_actor__a_Intercept)) %>%
pivot_longer(b_b_treatment1:b_b_treatment4) %>%
mutate(fitted = inv_logit_scaled(a_sim + value)) %>%
mutate(treatment = factor(str_remove(name, "b_b_treatment"),
labels = labels)) %>%
ggplot(aes(x = treatment, y = fitted, group = .draw)) +
geom_line(alpha = 1/2, color = "#e07a5f") +
coord_cartesian(ylim = 0:1)
d <- data.frame(y=0)
mod_nn = brm(
data=d,
family = gaussian,
y ~ 1,
prior = c( prior( normal(10, 1), class = Intercept),
prior( exponential(1), class = sigma) )
)
mod_nn = brm(
data=d,
family = gaussian,
y ~ 1,
prior = c( prior( normal(10, 1), class = Intercept),
prior( exponential(1), class = sigma) ),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
mod_nt = brm(
data=d,
family = gaussian,
y ~ 1,
prior = c( prior( student(2, 10, 1), class = Intercept),
prior( exponential(1), class = sigma) ),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
mod_nt = brm(
data=d,
family = gaussian,
y ~ 1,
prior = c( prior( student_t(2, 10, 1), class = Intercept),
prior( exponential(1), class = sigma) ),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
get_prior(formula = y ~1, family = student_t, data=d
)
get_prior(formula = y ~1, family = student_t, data=d)
get_prior(formula = y ~1, family = studentt, data=d)
get_prior(formula = y ~1, family = student_t, data=d)
get_prior(formula = y ~1, family = student, data=d)
mod_tn = brm(
data=d,
family = student,
y ~ 1,
prior = c( prior( normal(10, 1), class = Intercept),
prior( exponential(1), class = sigma) ),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
summary(mod_tn)
mod_tt = brm(
data=d,
family = student,
y ~ 1,
prior = c( prior( student_t(2, 10, 1), class = Intercept),
prior( exponential(1), class = sigma) ),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
plot(mod_nt)
data(Trolley, package="rethinking")
str(Trolley)
# fit model without varying intercepts
m_simple <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact,
prior = c( prior(normal(0, 1.5), class = Intercept) ),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model with varying intercepts
m_varying <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact + (1|id),
prior = c( prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sd)),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model without varying intercepts
m_simple <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact,
prior = c( prior(normal(0, 1.5), class = Intercept) ),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model with varying intercepts
m_varying <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact + (1|id),
prior = c( prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sd)),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e2")
)
# compare models using LOO cross-validation
loo_compare(
loo(m_simple),
loo(m_varying)
) %>%
print(simplify = FALSE)
# compare models using LOO cross-validation
m_simple  <- loo(m_simple)
m_varying <- loo(m_varying)
m_varying <- loo(m_varying, criteria = "waic")
m_varying <- waic(m_varying)
# compare models using WAIC cross-validation
m_simple  <- waic(m_simple )
data(Trolley, package="rethinking")
# fit model without varying intercepts
m_simple <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact,
prior = c( prior(normal(0, 1.5), class = Intercept) ),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model with varying intercepts
m_varying <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact + (1|id),
prior = c( prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sd)),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e2")
)
# compare models using WAIC cross-validation
m_simple  <- waic(m_simple )
m_varying <- waic(m_varying)
m_varying <- loo(m_varying)
data(Trolley, package="rethinking")
# fit model without varying intercepts
m_simple <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact,
prior = c( prior(normal(0, 1.5), class = Intercept) ),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model with varying intercepts
m_varying <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact + (1|id),
prior = c( prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sd)),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e2")
)
# compare models using WAIC cross-validation
m_simple  <- loo(m_simple )
m_varying <- loo(m_varying)
compare(m_simple, m_varying)
loo_compare(m_simple, m_varying)
data(Trolley, package="rethinking")
# fit model without varying intercepts
m_simple <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact,
prior = c( prior(normal(0, 1.5), class = Intercept) ),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e1")
)
# fit model with varying intercepts
m_varying <- brm(
data = Trolley,
family = cumulative,
response ~ 1 + action + intention + contact + (1|id),
prior = c( prior(normal(0, 1.5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sd)),
iter=2000, warmup=1000, cores=4, chains=4,
file=here("files/data/generated_data/m71.e2")
)
# compare models using LOO cross-validation
m_simple  <- add_criterion(m_simple , "waic")
m_varying <- add_criterion(m_varying, "waic")
loo_compare(m_simple, m_varying, criteron = "waic")
loo_compare(m_simple, m_varying)
# compare models using WAIC cross-validation
m_simple  <- add_criterion(m_simple , "loo")
m_varying <- add_criterion(m_varying, "loo")
loo_compare(m_simple, m_varying, criterion = "loo")
loo_compare(m_simple, m_varying, criterion = "loo")
loo_compare(m_simple, m_varying, criterion = "loo") %>%
print(simplify=F)
# posterior predictive check
pp_check(m_simple, ndraws = 50) +
ggtitle("Simple Model")
pp_check(m_varying, ndraws = 50) +
ggtitle("Varying Intercepts Model")
?ppc
?pp_check
# posterior predictive check
pp_check(m_simple, ndraws = 50, prefix = "ppc") +
ggtitle("Simple Model")
test <- pp_check(m_simple, ndraws = 50)
pp_check(m_simple, ndraws = 50, type="xyz")
# posterior predictive check
pp_check(m_simple, ndraws = 50, type="hist") +
ggtitle("Simple Model")
# posterior predictive check
pp_check(m_simple, ndraws = 5, type="hist") +
ggtitle("Simple Model")
# compare posterior predictions
nd <- expand_grid(
action = 0:1,
intention = 0:1,
contact = 0:1
)
# predictions from simple model
pred_simple <- predict(m_simple, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
# predictions from varying intercepts model
pred_varying <- predict(m_varying, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
nd <- distinct(Trolley, action, intent, contact, id)
nd <- distinct(Trolley, action, intention, contact, id)
nd
part3 = sample( unique(Trolley$id) , size=3, replace=F )
nd <- distinct(Trolley, action, intention, contact) %>%
crossing(id=part3)
View(nd)
part3
nd <- distinct(Trolley, action, intention, contact)
nd <- distinct(Trolley, action, intention, contact, id) %>%
filter(id %in% part3)
f <- fitted(m_varying, newdata = nd) %>%
data.frame() %>%
bind_cols(nd)
f
nd
f
f <- fitted(m_varying, newdata = nd) %>%
data.frame() %>%
bind_cols(nd) %>%
mutate(condition = str_c(action, intention, contact, sep="_"))
f
m_varying
fitted(m_varying, newdata = nd, scale = "response")
fitted(m_varying, newdata = nd, scale = "linear")
f <- fitted(m_varying, newdata = nd, scale = "response")
f
f <- fitted(m_varying, newdata = nd, scale = "response") %>%
data.frame()
View(f)
f <- fitted(m_varying, newdata = nd, scale = "response") %>%
data.frame() %>%
bind_cols(nd) %>%
mutate(condition = str_c(action, intention, contact, sep="_"))
f
f %>%
pivot_longer(-action:condition)
f %>%
pivot_longer(-c(action:condition))
f %>%
pivot_longer(-c(action:condition),
names_sep = "...")
f %>%
pivot_longer(-c(action:condition),
names_sep = "...",
names_to = c("stat", "response"))
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response"))
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1))
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1))
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1))%>%
ggplot(aes(x=response, y=Estimate.P.Y, group=1)) +
geom_bar(stat="identity") +
facet_wrap(~id)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1),
Estimate.P.Y = inv_logit_scaled(Estimate.P.Y)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, group=1)) +
geom_bar(stat="identity") +
labs(y="p")
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1),
Estimate.P.Y = inv_logit_scaled(Estimate.P.Y)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, group=1)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_wrap(~id)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, group=1)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_wrap(~id)
f
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>% View()
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=condition)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_wrap(~id)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_wrap(condition~id)
f %>%
pivot_longer(-c(action:condition),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_grid(condition~id)
f <- fitted(m_varying, newdata = nd, scale = "response") %>%
data.frame() %>%
bind_cols(nd)
f
f %>%
pivot_longer(-c(action:id),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=intention)) +
geom_bar(stat="identity") +
labs(y="p") +
facet_grid(action+contact~id)
f %>%
pivot_longer(-c(action:id),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=intention)) +
geom_bar(stat="identity", position="dodge") +
labs(y="p") +
facet_grid(action+contact~id)
f %>%
pivot_longer(-c(action:id),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=as.factor(intention))) +
geom_bar(stat="identity", position="dodge") +
labs(y="p") +
facet_grid(action+contact~id)
f %>%
pivot_longer(-c(action:id),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=as.factor(intention))) +
geom_bar(stat="identity", position="dodge") +
labs(y="p") +
facet_grid(action+contact~id) +
theme(legend.position = "bottom")
nd <- distinct(Trolley, action, intention, contact)
f <- fitted(m_varying, newdata = nd, scale = "response",
re_formula = NA) %>%
data.frame() %>%
bind_cols(nd)
f
f %>%
pivot_longer(-c(action:contact),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=as.factor(intention))) +
geom_bar(stat="identity", position="dodge") +
labs(y="p") +
facet_grid(action~contact) +
theme(legend.position = "bottom")
# create data for 2 new participants
nd <- distinct(Trolley, action, intention, contact) %>%
slice(rep(1:n(), times = 2)) %>%
mutate(id = rep(c("New1", "New2"), each = n()/2))
nd
# get predictions including random effects
f <- fitted(m_varying, newdata = nd, scale = "response") %>%
data.frame() %>%
bind_cols(nd)
# get predictions including random effects
f <- fitted(m_varying, newdata = nd,
scale = "response", allow_new_levels=T) %>%
data.frame() %>%
bind_cols(nd)
# plot
f %>%
pivot_longer(-c(action:id),
names_sep = "\\.{3}",
names_to = c("stat", "response")) %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(response = str_sub(response, 1, 1)) %>%
ggplot(aes(x=response, y=Estimate.P.Y, fill=as.factor(intention))) +
geom_bar(stat="identity", position="dodge") +
labs(y="p", fill="intention") +
facet_grid(action+contact~id) +
theme(legend.position = "bottom")
dice_roll = function( N=1 ){
sample( x=c(1:6), size=N, replace=T)
}
dice_roll()
dice_roll()
dice_roll()
---
dice_roll(5)
dice_roll = function( N=1 ){
sample( x=c(1:6), size=N, replace=T)
}
dice_roll()
dice_roll(5)
