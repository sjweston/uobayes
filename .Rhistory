geom_point( size=2, color = "#1c5253" ) +
geom_line(alpha = .5)
# Chunk 12
m2
# Chunk 13
post <- as_draws_df(m2)
str(post)
# Chunk 14
modeled_prop = post %>%
select(b_Intercept, starts_with("r_tank")) %>%
pivot_longer(-b_Intercept, values_to = "logit") %>%
mutate(logit = logit + b_Intercept,
prob = inv_logit_scaled(logit)) %>%
group_by(name)
modeled_prop %>%
median_qi(prob)
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = mean(observed_prop$prob)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 50, y = avg_prop,
label = c("average proportion")) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = mean(observed_prop$prob)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 50, y = avg_prop+.05,
label = c("average proportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = mean(observed_prop$prob)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 48, y = avg_prop+.03,
label = c("average proportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = mean(observed_prop$prob)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 48, y = avg_prop+.03,
label = c("average\nproportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = mean(observed_prop$prob)
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 48, y = avg_prop+.03,
label = c("average proportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
str(post)
mean(post$b_Intercept)
inv_logit_scaled(mean(post$b_Intercept))
avg_prop = inv_logit_scaled(mean(post$b_Intercept))
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = inv_logit_scaled(mean(post$b_Intercept))
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 46, y = avg_prop+.03,
label = c("average proportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
#avg_prop_o =
observed_prop
#avg_prop_o =
observed_prop %>%
mutate(logit = log(prob))
#avg_prop_o =
observed_prop %>%
mutate(logit = log(prob)) %>%
summarise(m = mean(logit))
#avg_prop_o =
observed_prop %>%
mutate(logit = psych::logit(prob)) %>%
summarise(m = mean(logit))
observed_prop %>%
mutate(logit = psych::logit(prob))
#avg_prop_o =
observed_prop %>%
mutate(logit = psych::logit(prob)) %>%
filter(!is.inf(logit)) %>%
summarise(m = mean(logit))
#avg_prop_o =
observed_prop %>%
mutate(logit = psych::logit(prob)) %>%
filter(!is.Inf(logit)) %>%
summarise(m = mean(logit))
#avg_prop_o =
observed_prop %>%
mutate(logit = psych::logit(prob)) %>%
filter(!is.infinite(logit)) %>%
summarise(m = mean(logit))
#avg_prop_o =
observed_prop %>%
mutate(prob = ifelse(prob == 1, .999, prob),
logit = psych::logit(prob)) %>%
summarise(m = mean(logit))
#avg_prop_o =
observed_prop %>%
mutate(prob = ifelse(prob == 1, .999, prob),
logit = psych::logit(prob)) %>%
summarise(m = mean(logit)) %>%
mutate(m = inv_logit_scaled(m))
plot(m2)
plot(m2)
library(bayesplot)
as_draws_df(m2)
as_draws_df(m2) %>%
mcmc_trace( pars = vars(r_tank[1,Intercept]:r_tank[48,Intercept]) )
as_draws_df(m2) %>%
select(contains("tank"))
as_draws_df(m2) %>%
select(contains("tank")) %>%
mcmc_trace()
as_draws_df(m2) %>%
select(contains("tank")) %>%
select(1:8) %>%
mcmc_trace()
as_draws_df(m2) %>%
select(contains("tank")) %>%
select(1:8) %>%
mcmc_trace(facet_args = list(ncol=4))
as_draws_df(m2)
posterior_samples(m2, add_chain = T)
library(bayesplot)
posterior_samples(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(1:8, chain) %>%
mcmc_trace(facet_args = list(ncol=4))
posterior_samples(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(1:8, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4))
posterior_samples(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, free="scales"))
posterior_samples(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as.draws(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as.draws_df(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as_draws_df(m2, add_chain = T) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as_draws_df(m2) %>%
select(contains("tank"), chain) %>%
select(9:16, chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
brms::as_draws_df(m2)
library(bayesplot)
as_draws_df(m2) %>%
select(contains("tank"), .chain) %>%
select(9:16, .chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as_draws_df(m2) %>%
select(contains("tank"), .chain) %>%
select(9:16, chain = .chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
as_draws_df(m2, add_chain = T) %>%
select(contains("tank"), .chain) %>%
select(1:8, chain=chain) %>%
mcmc_trace(facet_args = list(ncol=4))
as_draws_df(m2) %>%
select(contains("tank"), .chain) %>%
select(1:8, chain=chain) %>%
mcmc_trace(facet_args = list(ncol=4))
as_draws_df(m2)
as_draws_df(m2) %>%
select(contains("tank"), .chain)
as_draws_df(m2) %>%
select(contains("tank"), .chain) %>%
select(1:8, chain=.chain) %>%
mcmc_trace(facet_args = list(ncol=4))
as_draws_df(m2) %>%
select(contains("tank"), .chain) %>%
select(9:16, chain = .chain) %>%
mcmc_rank_overlay(facet_args = list(ncol=4, scales="free"))
#| code-fold: true
observed_prop = d %>%
mutate(prob = surv/density)
modeled_prop_m = modeled_prop %>%
median_qi(prob) %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) )
avg_prop = inv_logit_scaled(mean(post$b_Intercept))
modeled_prop %>%
mutate( tank = str_extract(name, "[0-9]{1,2}"),
tank = as.numeric(tank) ) %>%
ggplot( aes(x=tank, y=prob) ) +
stat_slab(alpha=.7) +
geom_point( data = modeled_prop_m,
shape = 1,
size=2) +
geom_point(data = observed_prop,
color = "#5e8485",
size=2) +
# lines separating small, med, and large tanks
geom_vline(xintercept = c(16.5, 32.5),
linetype = "dashed",
linewidth = 1/4, color = "grey25") +
geom_hline(yintercept = avg_prop, linewidth = .5, color = "#5e8485") +
annotate(geom = "text",
x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
annotate(geom = "text",
x = 46, y = avg_prop+.03,
label = c("average proportion"),
color = "#5e8485", ) +
labs(
x="tank",
y=NULL,
title="probability of survival"
)
data(bangaldesh, package = "rethinking")
rethinking::bangladesh
data(bangladesh, package="rethinking")
data(bangladesh, package = "rethinking")
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms)
library(tidybayes)
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
data(bangladesh, package="rethinking")
d <- bangladesh
m1 <- brm(
data=d,
family=bernoulli,
use.contraception ~ 1 + (1 | district),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1
)
m1 <- brm(
data=d,
family=bernoulli,
use.contraception ~ 1 + (1 | district),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1,
file = here("files/data/generated_data/m71.1"))
m2 <- brm(
data=d,
family=bernoulli,
use.contraception ~ 1 + urban + (1 + urban || district),
prior = c( prior(normal(0, 1), class = Intercept), # alpha bar
prior(exponential(1), class = sd)),       # sigma
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1)
m2
m2 <- brm(
data=d,
family=bernoulli,
use.contraception ~ 1 + urban + (1 + urban | district),
prior = c( prior(normal(0, 1), class = Intercept), # alpha bar
prior(exponential(1), class = sd)),       # sigma
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1)
m2
m2 <- brm(
data=d,
family=bernoulli,
use.contraception ~ 1 + urban + (1 + urban || district),
prior = c( prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b),
prior(exponential(1), class = sd)),
chains=4, cores=4, iter=2000, warmup=1000,
seed = 1,
file = here("files/data/generated_data/m71.2"))
m2
?rethinking::chimpanzees
data(chimpanzees, package="rethinking")
d <- chimpanzees
d
str(d)
?str.data.frame
str(d, vec.length=5)
str(d, strict.width = "cut")
str(d, list.len=4)
str(d, vec.length=5)
str(d, width=5)
str(d, vec.len=5)
options()$str
options()$str_data.frame
names(d)
count(d, actor)
unique(d$actor)
unique(d$block)
unique(d$prosoc_left)
unique(d$condition)
str(d)
d %>% count(treatment, prosoc_left, condition)
d$treatment <- 1 + d$prosoc_left + 2*d$condition
d %>% count(treatment, prosoc_left, condition)
