labs(title = "Poisson Distribution",
x = "x",
y = "Probability") +
facet_wrap(~lambda, ncol = 1) +
guides(fill = "none") +
theme_minimal() +
theme(legend.position = "right")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
---
title: "Week 1: Introduction to Bayesian Analysis"
library(tidyverse)
# Create data frame with all combinations
df <- expand.grid(x = 0:10,
lambda = 1:5) %>%
mutate(probability = dpois(x, lambda),
lambda = str_c("λ =", lambda))
# Create plot
ggplot(df, aes(x = x, y = probability, fill = factor(lambda))) +
geom_bar(stat = "identity") +
scale_fill_viridis_d(name = "λ") +
labs(title = "Poisson Distribution",
x = "x",
y = "Probability") +
facet_wrap(~lambda, ncol = 1) +
guides(fill = "none") +
theme_minimal() +
theme(legend.position = "right")
# Create plot
ggplot(df, aes(x = x, y = probability)) +
geom_bar(stat = "identity", fill = "#1c5253") +
labs(title = "Poisson Distribution",
x = "x",
y = "Probability") +
facet_wrap(~lambda, ncol = 1) +
guides(fill = "none") +
theme_minimal() +
theme(legend.position = "right")
# Plot the prior distribution (Gamma(2, 0.2))
lambda <- seq(0, 15, length.out = 1000)
prior <- dgamma(lambda, shape = 2, rate = 0.2)
data_prior <- data.frame(lambda = lambda, density = prior)
ggplot(data_prior, aes(x = lambda, y = density)) +
geom_line(color = "blue", size = 1) +
labs(title = "Prior Distribution of Lambda",
x = expression(lambda),
y = "Density") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 0:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape rate = rate))
expand.grid(lambda = 0:15,
shape = 0:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate))
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate))
df <- expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate)
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate)
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = as.factor(shape))) +
facet_wrap(~rate)
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = as.factor(shape))) +
facet_wrap(~rate, scales = "free")
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = as.factor(shape))) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate =", rate)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = as.factor(shape))) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
# Plot the prior distribution (Gamma(2, 0.2))
lambda <- seq(0, 15, length.out = 1000)
prior <- dgamma(lambda, shape = 2, rate = 0.2)
data_prior <- data.frame(lambda = lambda, density = prior)
ggplot(data_prior, aes(x = lambda, y = density)) +
geom_line(color = "blue", size = 1) +
labs(title = "Prior Distribution of Lambda",
x = expression(lambda),
y = "Density") +
theme_minimal()
# Plot the prior distribution (Gamma(2, 0.2))
lambda <- seq(0, 15, length.out = 1000)
prior <- dgamma(lambda, shape = 2, rate = 0.2)
data_prior <- data.frame(lambda = lambda, density = prior)
ggplot(data_prior, aes(x = lambda, y = density)) +
geom_line(color = "#1c5253", size = 1) +
labs(title = "Prior Distribution of Lambda",
x = expression(lambda),
y = "Density") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = shape) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
scale_color_gradient(low = "white", high = "#1c5253") +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
source("~/Library/CloudStorage/GoogleDrive-weston.sara@gmail.com/My Drive/Work (google drive)/teaching/uobayes/render_lecture.R", echo=TRUE)
source("~/Library/CloudStorage/GoogleDrive-weston.sara@gmail.com/My Drive/Work (google drive)/teaching/uobayes/render_lecture.R", echo=TRUE)
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.1, 1.5, by = .4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.05, 1, out.length = 4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
seq(.05, 1, out.length = 4)
expand.grid(lambda = 0:15,
shape = 1:5,
rate = seq(.05, 1, length.out = 4)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
expand.grid(lambda = 0:15,
shape = 1:5,
rate = c(.05, .4, .6, 1)) %>%
mutate(probability = dgamma(lambda, shape = shape, rate = rate),
rate = str_c("rate = ", rate),
shape = as.factor(shape)) %>%
ggplot(aes(x = lambda, y = probability)) +
geom_line(aes(color = shape)) +
facet_wrap(~rate, scales = "free") +
theme_minimal()
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
library(tidyverse)
# Create data frame with all combinations
df <- expand.grid(x = 0:10,
lambda = 1:5) %>%
mutate(probability = dpois(x, lambda),
lambda = str_c("λ =", lambda))
# Create plot
ggplot(df, aes(x = x, y = probability)) +
geom_bar(stat = "identity", fill = "#1c5253") +
labs(title = "Poisson Distribution",
x = "x",
y = "Probability") +
facet_wrap(~lambda, ncol = 1, strip.position = "right") +
guides(fill = "none") +
theme_minimal(base_size = 15) +
theme(legend.position = "right")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
x = c(0:10)
dpois(x, lamba = 8.2)
dpois(x, lamdba = 8.2)
dpois(x, lambda = 8.2)
# Define the parameter range for lambda
lambda <- seq(0, 30, length.out = 1000)
# Define the observed data points
observed_data <- c(7, 8, 19)
# Define the base color
base_color <- "#1c5253"
# Create a color palette (shades of the base color)
palette_colors <- c(
base_color,
adjustcolor(base_color, alpha.f = 0.7),  # Lighter shade
adjustcolor(base_color, alpha.f = 0.5)   # Even lighter shade
)
# Function to calculate Poisson likelihood
poisson_likelihood <- function(lambda, x) {
(lambda^x * exp(-lambda)) / factorial(x)
}
# Create a data frame to store likelihoods for each data point
likelihood_data <- data.frame(
lambda = rep(lambda, times = length(observed_data)),
likelihood = unlist(lapply(observed_data, function(x) poisson_likelihood(lambda, x))),
observed = rep(observed_data, each = length(lambda))
)
# Plot likelihood functions for each observed data point
ggplot(likelihood_data, aes(x = lambda, y = likelihood, color = as.factor(observed))) +
geom_line(size = 1.2) +
facet_wrap(~ observed, scales = "free_y", labeller = label_bquote(cols = x == .(observed))) +
scale_color_manual(
values = palette_colors,
guide = guide_legend(title = "Observed Value")
) +
labs(
title = "Poisson Likelihoods for Different Observed Counts",
x = expression(lambda),
y = "Likelihood"
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 14, color = base_color),
axis.title = element_text(color = base_color),
axis.text = element_text(color = base_color),
plot.title = element_text(hjust = 0.5, color = base_color, size = 16)
)
# Plot likelihood functions for each observed data point
ggplot(likelihood_data, aes(x = lambda, y = likelihood, color = as.factor(observed))) +
geom_line(size = 1.2) +
facet_wrap(~ observed, scales = "free_y", labeller = label_bquote(cols = x == .(observed))) +
scale_color_manual(
values = palette_colors
) +
guides(color = "none") +
labs(
title = "Poisson Likelihoods for Different Observed Counts",
x = expression(lambda),
y = "Likelihood"
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 14, color = base_color),
axis.title = element_text(color = base_color),
axis.text = element_text(color = base_color),
plot.title = element_text(hjust = 0.5, color = base_color, size = 16)
)
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
# Define the observed data points
observed_data <- c(7, 8, 19)
# Define the base color
base_color <- "#1c5253"
# Create a color palette (shades of the base color)
palette_colors <- c(
base_color,
adjustcolor(base_color, alpha.f = 0.7),  # Lighter shade
adjustcolor(base_color, alpha.f = 0.5)   # Even lighter shade
)
# Function to calculate Poisson likelihood
poisson_likelihood <- function(lambda, x) {
(lambda^x * exp(-lambda)) / factorial(x)
}
data.frame(
lambda = rep(lambda, times = length(observed_data)),
likelihood = unlist(lapply(observed_data, function(x) poisson_likelihood(lambda, x))),
observed = rep(observed_data, each = length(lambda))
)
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
post_samples <- rbeta(1000, 6+1, 3+1)
dens( post_samples, lwd=4)
library(rethinking)
# 35:56 -- probability distribution ---------------------------------------
## here, we visualise the likelihood of a particular sample under 5 possible hypotheses.
## the sample
sample <- c("W", "L", "W", "W", "W", "L", "W", "L", "W")
W <- sum(sample == "W") #number of W observed
L <- sum(sample == "L") #number of L observed
p <- c(0, .25, .5, .75, 1) #hypothetical proportions of W
ways <- sapply(p, function(q) (q*4)^W * ((1-q)*4)^L )
prob = ways/sum(ways)
cbind( p, ways, prob )
barplot(
height = prob,
names.arg = p,
col = "black",
xlab = "proportion water",
ylab = "probability",
ylim = c(0, max(prob) * 1.2) # Add some space above the bars
)
# 38:37 -- generative simulation ------------------------------------------
# function to toss a globe covered p by water N times
sim_globe = function( p=0.7 , N=9 ){
sample(
x = c("W", "L"),  # possible values
size = N,         # how many draws
prob = c(p, 1-p), # probability of each possibility
replace = TRUE    # the same value can be drawn multiple times
)
}
# try it
sim_globe()
# try it many times -- each column is a new try
replicate( sim_globe( p=0.5, N=9 ), n = 10)
# test on extreme settings
sim_globe( p = 1 )  # no land
sum(sim_globe(N=1e4) == "W")/1e4
# 41:42 -- code the estimator ---------------------------------------------
# function to compute posterior distribution
compute_posterior = function( the_sample, poss = c(0, .25, .50, .75, 1) ){
W = sum(the_sample == "W") # number of W observed
L = sum(the_sample == "L") # number of L observed
ways = sapply(
poss,
function(q) (q*4)^W * ((1-q)*4)^L
)
post = ways/sum(ways)
bars = sapply(post, function(q) make_bar(q)) # this is from the rethinking package
data.frame(poss, ways, post = round(post, 3), bars)
}
# do it a couple times
compute_posterior(sim_globe())
compute_posterior(sim_globe())
compute_posterior(sample)
# 1:05:53 -- sampling the posterior ---------------------------------------
post_samples <- rbeta(1000, 6+1, 3+1)
dens( post_samples, lwd=4)
dens( post_samples, lwd=4, col=2, xlab = "proportion water", adj = .1)
dens( post_samples, lwd=4, col="#1c5253", xlab = "proportion water", adj = .1)
curve( dbeta(x, 6+1, 3+1), add = T, lty = 2, lwd = 3)
adjustcolor(base_color, alpha.f = 0.7)
adjustcolor(base_color, alpha.f = 0.5)
post_samples <- rbeta(1000, 6+1, 3+1)
dens( post_samples, lwd=4, col="#1C525380", xlab = "proportion water", adj = .1)
curve( dbeta(x, 6+1, 3+1), add = T, lty = 2, lwd = 3)
# simulate posterior PREDICTIVE distribution
post_samples <- rbeta(1000, 6+1, 3+1) # posterior distribution for p
pred_post <- sapply(post_samples,
function(p) sum( sim_globe(p, 10) == "W") )
tab_post = table(post_pred)
tab_post = table(pred_post)
tab_post
as.data.frame(tab_post)
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(xmin = pred_post, xmax = pred_post,
ymin = 0, ymax = Freq))
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq))
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq),
linewidth = 3)
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq),
linewidth = 3,
color = "1c5253")
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq),
linewidth = 3,
color = "$1c5253")
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq),
linewidth = 3,
color = "#1c5253")
as.data.frame(tab_post) %>%
ggplot(aes(x = pred_post, y = Freq)) +
geom_segment(aes(x = pred_post, xend = pred_post,
y = 0, yend = Freq),
linewidth = 3,
color = "#1c5253") +
labs(x = "Number of W's",
y = "Count") +
theme_minimal()
p=0.7 , N=9, x=0.1
p=0.7
N=9
x=0.1
true_sample <- sample(x=c("W", "L"), size=N, prob=c(p, 1-p), replace=TRUE)
true_sample
set.seed(2)
runif(N) < x
runif(N) < x
runif(N) < x
set.seed(3)
runif(N) < x
runif(N) < x
set.seed(5)
runif(N) < x
set.seed(6)
runif(N) < x
set.seed(7)
runif(N) < x
set.seed(7)
obs_sample <- ifelse( runif(N) < x,
ifelse( true_sample == "W", "L", "W"), #error
true_sample) # no error
obs_sample
true_sample
sim_globe2 = function( p=0.7 , N=9, x=0.1 ){
true_sample <- sample(x=c("W", "L"), size=N, prob=c(p, 1-p), replace=TRUE)
obs_sample <- ifelse( runif(N) < x,
ifelse( true_sample == "W", "L", "W"), #error
true_sample) # no error
return(obs_sample)
}
rmarkdown::render("lectures/lecture01-1.Rmd", output_format = "xaringan::moon_reader")
