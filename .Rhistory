a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , .05 )
), data=d , start=list(b=rep(0,6)) )
# Chunk 9
coeftab( m7.6a, m7.6b )
# Chunk 10
# Function to calculate entropy: H(p) = -sum(p_i * log2(p_i))
calculate_entropy <- function(probabilities) {
# Handle zero probabilities (log(0) is undefined)
probabilities <- probabilities[probabilities > 0]
-sum(probabilities * log2(probabilities))
}
# Create two distributions
# 1. High entropy: Uniform distribution (maximum entropy)
high_entropy_dist <- rep(1/10, 10)  # 10 equally likely outcomes
# 2. Low entropy: Highly skewed distribution
low_entropy_dist <- c(0.91, rep(0.01, 9))  # One highly likely outcome, others unlikely
# Calculate entropy values
high_entropy_value <- calculate_entropy(high_entropy_dist)
low_entropy_value <- calculate_entropy(low_entropy_dist)
# Prepare data for plotting
high_entropy_df <- data.frame(
Outcome = 1:10,
Probability = high_entropy_dist,
Distribution = "High Entropy"
)
low_entropy_df <- data.frame(
Outcome = 1:10,
Probability = low_entropy_dist,
Distribution = "Low Entropy"
)
# Combine data frames
plot_data <- rbind(high_entropy_df, low_entropy_df)
# Create labels with entropy values
plot_labels <- c(
"High Entropy" = paste("High Entropy: H =", round(high_entropy_value, 3)),
"Low Entropy" = paste("Low Entropy: H =", round(low_entropy_value, 3))
)
# Plot both distributions
ggplot(plot_data, aes(x = factor(Outcome), y = Probability, fill = Distribution)) +
geom_bar(stat = "identity") +
facet_wrap(~ Distribution, scales = "free_y", labeller = labeller(Distribution = plot_labels)) +
labs(
#title = "Comparison of High and Low Entropy Distributions",
x = "Outcome",
y = "Probability",
fill = "Distribution Type"
) +
guides(fill = FALSE) +
theme_cowplot(font_size = 20) +
theme(
legend.position = "bottom",
strip.text = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 0)
)
# Chunk 11
p <- c( .3, .7 )
-sum( p * log(p) )
# Chunk 12
p <- c( .01, .99 )
-sum( p * log(p) )
# Chunk 13
p = c(.3, .7)
q = c(.25, .75)
sum(p*log(p/q))
# Chunk 14
m7.1 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b*mass_std,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d )
lppd(m7.1)
# Chunk 15
sum(lppd(m7.1))
# Chunk 16
-2*sum(lppd(m7.1))
# Chunk 18
N <- 20
kseq <- 1:5
load(here("lectures/data/4-1-dev.Rdata"))
plot( 1:5 , dev[1,] , ylim=c( min(dev[1:2,])-5 , max(dev[1:2,])+10 ) ,
xlim=c(1,5.1) , xlab="number of parameters" , ylab="deviance" ,
pch=16 , col=rangi2 )
mtext( concat( "N = ",N ) )
points( (1:5)+0.1 , dev[2,] )
for ( i in kseq ) {
pts_in <- dev[1,i] + c(-1,+1)*dev[3,i]
pts_out <- dev[2,i] + c(-1,+1)*dev[4,i]
lines( c(i,i) , pts_in , col=rangi2 )
lines( c(i,i)+0.1 , pts_out )
}
# Chunk 19
#| code-fold: true
# Create data for k-fold cross validation visualization
k <- 5  # Number of folds
blocks <- 5  # Number of data blocks per fold
fold_data <- data.frame()
# Generate data for each fold
for (i in 1:k) {
# For each fold, create a row with blocks indicating training or test
fold_row <- data.frame(
fold = paste("Fold", i),
block = 1:blocks,
type = rep("Training", blocks)
)
# Set one block as test data (different block for each fold)
fold_row$type[i] <- "Test"
# Add to the overall data
fold_data <- rbind(fold_data, fold_row)
}
# Convert fold to factor to preserve order
fold_data$fold <- factor(fold_data$fold, levels = unique(fold_data$fold))
# Create the visualization
k_fold_plot <- ggplot(fold_data, aes(x = block, y = fold, fill = type)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_manual(values = c("Training" = "#1c5253", "Test" = "#e07a5f")) +
scale_y_discrete(breaks = NULL) +
labs(
#title = "K-Fold Cross Validation (k=5)",
fill = "Data Usage",
x = "Data Blocks",
y = ""
) +
facet_wrap(fold ~ ., nrow = 5, scale = "free") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom",
panel.grid = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank()
)
# Display the plot
print(k_fold_plot)
# Chunk 20
rethinking::LOO(m7.1)
rethinking::LOO(m7.1, pointwise = T)
# Chunk 21
rethinking::WAIC(m7.1)
rethinking::WAIC(m7.1, pointwise = T)
compare( m7.1, m7.6a, m7.6b , func=PSIS )
compare( m7.1, m7.6a, m7.6b , func=WAIC )
plot( compare( m7.1, m7.6a, m7.6b , func=WAIC ) )
plot( compare( m7.1, m7.6a, m7.6b) )
plot(m42.1)
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms) ## NEW PACKAGE
library(tidybayes) ## NEW PACKAGE
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
m42.1 <-
brm(data = list(w = 6),
family = binomial(link = "identity"),
w | trials(9) ~ 0 + Intercept,
# this is a flat prior bounded by 0 and 1
prior(beta(1, 1), class = b, lb = 0, ub = 1),
iter = 5000, warmup = 1000,
seed = 3,
file = here("fits/m42.1"))
# Chunk 4
summary(m42.1)
# Chunk 5
plot(m42.1)
?brm
m42.1 <-
brm(data = list(w = 6),
family = binomial(link = "identity"),
w | trials(9) ~ 1,
# this is a flat prior bounded by 0 and 1
prior(beta(1, 1), class = b, lb = 0, ub = 1),
iter = 5000, warmup = 1000,
seed = 3)
?prior
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms) ## NEW PACKAGE
library(tidybayes) ## NEW PACKAGE
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
m42.1 <-
brm(data = list(w = 6),
family = binomial(link = "identity"),
w | trials(9) ~ 0 + Intercept,
# this is a flat prior bounded by 0 and 1
prior(beta(1, 1), class = b, lb = 0, ub = 1),
iter = 5000, warmup = 1000, chains = 4,
seed = 3,
file = here("fits/m42.1"))
# Chunk 10
summary(m42.1)
# Chunk 11
plot(m42.1)
# Chunk 12
get_variables(m42.1)
# Chunk 13
p42.1 <- m42.1 %>%
spread_draws(b_Intercept, ndraws = 1e4, seed = 123)
dim(p42.1)
head(p42.1)
# Chunk 14
#| code-fold: true
p42.1 %>%
ggplot(aes(x = b_Intercept)) +
geom_density(fill = "#1c5253", color = "white") +
labs(
title = "Posterior probability",
x = "probabilty of water"
) +
scale_y_continuous(NULL, breaks = NULL)
# Chunk 15
data(Howell1, package = "rethinking")
d <- Howell1
library(measurements)
d$height <- conv_unit(d$height, from = "cm", to = "feet")
d$weight <- conv_unit(d$weight, from = "kg", to = "lbs")
describe(d, fast = T)
d <- d[d$age >= 18, ]
d$height_c <- d$height - mean(d$height)
# Chunk 17
#| code-line-numbers: "11"
#|
# Chunk 18
get_variables(m42.2p)
m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma)
m42.2 <- brm(
data = d,
family = gaussian,
weight ~ height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( lognormal(1,2), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
file = here("fits/m42.2"))
m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma)
post_draws = m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma) %>%
sample(50)
post_draws = m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma) %>%
sample_n(50, replace = F)
post_draws = m42.2 %>%
spread_draws(b_Intercept, b_height_c, sigma) %>%
sample_n(50)
d %>%
ggplot(aes(x = height, y = weight)) +
geom_point()
head(post_draws)
d %>%
ggplot(aes(x = height, y = weight)) +
geom_point() +
geom_abline(aes(x = b_Intercept + b_height_c + mean(d$height)),
data = post_draws)
?geom_abline()
d %>%
ggplot(aes(x = height, y = weight)) +
geom_point() +
geom_abline(aes(intercept = b_Intercept,
slope = b_height_c + mean(d$height)),
data = post_draws)
d %>%
ggplot(aes(x = height, y = weight)) +
geom_point() +
geom_abline(aes(intercept = b_Intercept + mean(d$height),
slope = b_height_c),
data = post_draws)
d %>%
ggplot(aes(x = height_c, y = weight)) +
geom_point() +
geom_abline(aes(intercept = b_Intercept,
slope = b_height_c),
data = post_draws)
d %>%
ggplot(aes(x = height_c, y = weight)) +
geom_point() +
geom_abline(aes(intercept = b_Intercept,
slope = b_height_c),
alpha = .3,
color = "#1c5253",
data = post_draws)
m_height <- mean(d$height)
#| code-line-numbers: "2"
#|
m42.1 <-brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( normal(0,25), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
file = here("fits/m42.1"))
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms) ## NEW PACKAGE
library(tidybayes) ## NEW PACKAGE
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
data(Howell1, package = "rethinking")
d <- Howell1
library(measurements)
d$height <- conv_unit(d$height, from = "cm", to = "feet")
d$weight <- conv_unit(d$weight, from = "kg", to = "lbs")
describe(d, fast = T)
d <- d[d$age >= 18, ]
d$height_c <- d$height - mean(d$height)
#| code-line-numbers: "2"
#|
m42.1 <-brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( normal(0,25), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000, seed = 3,
file = here("fits/m42.1"))
summary(m42.1)
plot(m42.1)
get_variables(m42.1)
p42.1 <- m42.1 %>%
spread_draws(b_Intercept, b_height_c, sigma,
ndraws = 1e4, seed = 123)
dim(p42.1)
head(p42.1)
p42.1 %>% with_groups(.chain, summarise, min = min(.draw), max = max(.draw))
p42.1 %>% with_groups(.chain, summarise, min = min(.iteration), max = max(.iteration))
p42.1 %>%
ggplot(aes(x = b_Intercept)) +
geom_density(fill = "#1c5253", color = "white") +
labs(
title = "Posterior probability",
x = "probabilty of intercept (mean weight)"
) +
scale_y_continuous(NULL, breaks = NULL)
?get_prior
#| code-line-numbers: "11"
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( normal(0,25), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
get_prior(m42.1p)
get_prior(formula = weight ~ 1 + height_c)
get_prior(formula = weight ~ 1 + height_c, data = d)
#| code-line-numbers: "11"
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = default_p,
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
default_p = get_prior(
formula = weight ~ 1 + height_c,
data = d)
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = default_p,
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
default_p = get_prior(
formula = weight ~ 1 + height_c,
family = gaussian,
data = d)
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = default_p,
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
get_prior(
formula = weight ~ 1 + height_c,
data = d
)
#| code-line-numbers: "11"
m42.1p <- brm(
data = d,
family = gaussian,
weight ~ 1 + height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( normal(0,25), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
p42.2p <- m42.2p %>%
spread_draws(b_Intercept, b_height_c, sigma)
head(p42.2p)
p42.1p <- m42.1p %>%
spread_draws(b_Intercept, b_height_c, sigma)
head(p42.1p)
labels = seq(4, 6, by = .5)
breaks = labels - mean(d$height)
d %>%
ggplot(aes(x = height_c, y = weight)) +
geom_blank()+
geom_abline(aes( intercept=b_Intercept, slope=b_height_c),
data = p42.2p[1:50, ], #first 50 draws only
color = "#1c5253",
alpha = .3) +
scale_x_continuous("height(feet)", breaks = breaks, labels = labels) +
scale_y_continuous("weight(lbs)", limits = c(50,150))
d %>%
ggplot(aes(x = height_c, y = weight)) +
geom_blank()+
geom_abline(aes( intercept=b_Intercept, slope=b_height_c),
data = p42.1p[1:50, ], #first 50 draws only
color = "#1c5253",
alpha = .3) +
scale_x_continuous("height(feet)", breaks = breaks, labels = labels) +
scale_y_continuous("weight(lbs)", limits = c(50,150))
m42.2p <- brm(
data = d,
family = gaussian,
weight ~ height_c,
prior = c( prior( normal(130,20), class = Intercept),
prior( lognormal(1,2), class = b),
prior( uniform(0,50), class = sigma, ub = 50)
),
iter = 5000, warmup = 1000,
seed = 3,
sample_prior = "only")
p42.2p <- m42.2p %>%
spread_draws(b_Intercept, b_height_c, sigma)
d %>%
ggplot(aes(x = height_c, y = weight)) +
geom_blank()+
geom_abline(aes( intercept=b_Intercept, slope=b_height_c),
data = p42.2p[1:50, ], #first 50 draws only
color = "#1c5253",
alpha = .3) +
scale_x_continuous("height(feet)", breaks = breaks, labels = labels) +
scale_y_continuous("weight(lbs)", limits = c(50,150))
