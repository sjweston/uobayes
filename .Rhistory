# Chunk 14
# function to toss a globe covered p by water N times
sim_globe = function( p=0.7 , N=9 ){
sample(
x = c("W", "L"),  # possible values
size = N,         # how many draws
prob = c(p, 1-p), # probability of each possibility
replace = TRUE    # the same value can be drawn multiple times
)
}
sim_globe()
# Chunk 15
sim_globe = function( p=0.7 , N=9 ){
sample(
x = c("W", "L"),
size = N,
prob = c(p, 1-p),
replace = TRUE
)
}
# Chunk 16
# function to compute posterior distribution
compute_posterior = function( the_sample, poss = c(0, .25, .50, .75, 1) ){
W = sum(the_sample == "W") # number of W observed
L = sum(the_sample == "L") # number of L observed
num_sides = length(poss) - 1
ways = sapply(
poss,
function(q) (q*num_sides)^W * ((1-q)*num_sides)^L
)
post = ways/sum(ways)
bars = sapply(post, function(q) make_bar(q)) # this is from the rethinking package
data.frame(poss, ways, post = round(post, 3), bars)
}
# Chunk 17
compute_posterior(sample)
# Chunk 18
compute_posterior(sample, poss = seq(0, 1, length.out = 11))
# Chunk 19
compute_posterior(sample, poss = seq(0, 1, length.out = 21))
# Chunk 20
compute_posterior(sample, poss = seq(0, 1, length.out = 101))
# Chunk 21
compute_posterior(sample, poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 22
curve( dbeta(x, 6+1, 3+1), lty = 2, lwd = 3)
# Chunk 23
c("W", "W", "W") %>%
compute_posterior(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 24
c("W", "W", "W", "L") %>%
compute_posterior(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 25
c("L", "W", "W", "L", "W", "W", "W") %>%
compute_posterior(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 26
# format the table
t %>%
mutate(prob = product/sum(product),
p = seq(0,1, by=.25)) %>%
transmute(
conjecture = str_c("[", d1, " ", d2, " ", d3, " ", d4, "]"),
p = p,
`Ways to produce [w b w]` = str_c(blue1, " * ", white, " * ", blue2, " = ", product),
plausibility = prob
) %>%
flextable() %>%
width(j = 1:4, width = c(1,1, 2,1)) %>%
align(align = "center", part = "all")
# Chunk 27
# format the table
t %>%
mutate(prior = product/sum(product),
p = seq(0,1, by=.25)) %>%
transmute(
conjecture = str_c("[", d1, " ", d2, " ", d3, " ", d4, "]"),
p = p,
prior = prior,
`Ways to produce [b]` = 0:4,
`prior * count` = prior*`Ways to produce [b]`,
posterior = round(`prior * count`/sum(`prior * count`),3)
) %>%
flextable() %>%
#width(j = 1:4, width = c(1,1, 2,1)) %>%
align(align = "center", part = "all")
# Chunk 28
compute_posterior5 = function( the_sample, poss = c(0, .25, .50, .75, 1) ){
W = sum(the_sample == "W") # number of W observed
L = sum(the_sample == "L") # number of L observed
num_sides = length(poss) - 1
ways = sapply(
poss,
function(q) ifelse(
q < .5,
0,
(q*num_sides)^W * ((1-q)*num_sides)^L
)
)
post = ways/sum(ways)
bars = sapply(post, function(q) make_bar(q)) # this is from the rethinking package
data.frame(poss, ways, post = round(post, 3), bars)
}
# Chunk 29
c("W", "W", "W") %>%
compute_posterior5(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 30
c("W", "W", "W", "L") %>%
compute_posterior5(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 31
c("L", "W", "W", "L", "W", "W", "W") %>%
compute_posterior5(poss = seq(0, 1, length.out = 101)) %>%
ggplot(aes(x = poss, y = ways)) +
geom_line() +
theme_minimal()
# Chunk 32
# define grid
p.grid <- seq(0, 1, length.out = 100)
# define prior
prior <- rep(1, 100)
# compute likelihood at each value in grid
likelihood <- dbinom(6, size = 9, prob = p.grid)
# compute product of prior and likelihood
unstd.posterior <- prior * likelihood
# standardize posterior
posterior <- unstd.posterior / sum(unstd.posterior)
# standardize posterior
(posterior <- unstd.posterior / sum(unstd.posterior))
p.grid
p = .7
W = 9
L = 3
(p^W)*((1-p)^L)
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
post = (poss^W)*((1-poss)^L)
return(post)
}
p = seq(0, 1, length.out = 100)
compute_posterior(c("W"), p)
compute_posterior(c("W"), p) %>% plot(x = poss, y = .)
library(tidyverse)
library(cowplot)
library(flextable)
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
post = (poss^W)*((1-poss)^L)
return(post)
}
p = seq(0, 1, length.out = 100)
compute_posterior(c("W"), p) %>% plot(x = poss, y = .)
compute_posterior(c("W"), p) %>% plot(x = p, y = .)
compute_posterior(c("W"), p) %>% plot(x = p, y = ., lwd = 2)
compute_posterior(c("W"), p) %>% plot(x = p, y = ., size = 1)
compute_posterior(c("W"), p) %>% plot(x = p, y = ., pch = 1)
compute_posterior(c("W"), p) %>% plot(x = p, y = ., pch = 2)
compute_posterior(c("W"), p) %>% plot(x = p, y = ., pch = ".")
compute_posterior(c("W"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior(c("W", "L"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior(c("W", "L", "W"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior(c("W", "L", "W", "W"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior(c("W", "L", "W", "W", "L"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
post = (((W + L + 1)!)/(W!L!))*(poss^W)*((1-poss)^L)
3!
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
post = ((factorial(W + L + 1))/(factorial(W)*factorial(L)))*(poss^W)*((1-poss)^L)
return(post)
}
p = seq(0, 1, length.out = 100)
compute_posterior(c("W", "L", "W", "W", "L"), p) %>% plot(x = p, y = ., type = "line")
compute_posterior(c("W", "L", "W", "W", "L"), p) %>%
plot(x = p, y = ., type = "l")
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
ways <- sapply(poss, function(q) (q*4)^W + ( (1-q)*4)^L )
post <- ways/sum(ways)
return(post)
}
(sample = sim_globe())
# Chunk 1: xaringan-themer
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono")
)
# Chunk 2
library(tidyverse)
library(cowplot)
library(flextable)
# Chunk 3
# function to toss a globe covered p by water N times
sim_globe = function( p=0.7 , N=9 ){
sample(
x = c("W", "L"),  # possible values
size = N,         # how many draws
prob = c(p, 1-p), # probability of each possibility
replace = TRUE    # the same value can be drawn multiple times
)
}
sim_globe()
compute_posterior = function(sample, poss){
W = sum(sample == "W")
L = sum(sample == "L")
ways <- sapply(poss, function(q) (q*4)^W + ( (1-q)*4)^L )
post <- ways/sum(ways)
return(post)
}
(sample = sim_globe())
compute_posterior(sample)
compute_posterior = function(sample, poss = c(0, .25, .5, .75, 1)){
W = sum(sample == "W")
L = sum(sample == "L")
ways <- sapply(poss, function(q) (q*4)^W + ( (1-q)*4)^L )
post <- ways/sum(ways)
return(post)
}
(sample = sim_globe())
compute_posterior(sample)
dbinom(x = 6, size = 9, prob = .7)
compute_posterior = function(sample, poss = seq(0,1,length.out=100)){
W = sum(sample == "W")
L = sum(sample == "L")
likelihood = sapply( poss, function(x) dbinom(x = W, size = W+L, prob = x))
post = ( prior*likelihood ) / sum( prior*likelihood)
return(post)
}
(sample = sim_globe())
compute_posterior(sample)
compute_posterior = function(sample, poss = seq(0,1,length.out=100)){
W = sum(sample == "W")
L = sum(sample == "L")
likelihood = sapply( poss, function(x) dbinom(x = W, size = W+L, prob = x))
post = ( likelihood ) / sum( likelihood)
return(post)
}
(sample = sim_globe())
compute_posterior(sample)
plot(seq(0,1,length.out=100), compute_posterior(sample))
sample = c("W", "W", "W")
plot(seq(0,1,length.out=100), compute_posterior(sample))
plot(seq(0,1,length.out=100), compute_posterior(sample), type = "l")
sample = c("L", "W", "W", "L", "W", "W", "W")
plot(seq(0,1,length.out=100), compute_posterior(sample))
compute_posterior = function(sample, poss = seq(0,1,length.out=100)){
W = sum(sample == "W")
L = sum(sample == "L")
prior = ifelse(poss < .5, 0, 1)
likelihood = sapply( poss, function(x) dbinom(x = W, size = W+L, prob = x))
post = ( prior*likelihood ) / sum( prior*likelihood)
return(post)
}
sample = c("W", "W", "W")
plot(seq(0,1,length.out=100), compute_posterior(sample), type = "l")
sample = c("W", "W", "W", "L")
plot(seq(0,1,length.out=100), compute_posterior(sample), type = "l")
sample = c("L", "W", "W", "L", "W", "W", "W")
plot(seq(0,1,length.out=100), compute_posterior(sample), type = "l")
compute_posterior = function(sample, poss = seq(0,1,length.out=100)){
W = sum(sample == "W")
L = sum(sample == "L")
prior = rep(1, length(poss))
likelihood = sapply( poss, function(x) dbinom(x = W, size = W+L, prob = x))
post = ( prior*likelihood ) / sum( prior*likelihood)
return(post)
}
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
rethinking::HPDI(samples, prob = .90)
rbinom(1, 15, prop = samples)
rbinom(1, 15, prob = samples)
rbinom(1e4, 15, prob = samples)
table(dummy_w)
dummy_w <- rbinom(1e4, 15, prob = samples)
table(dummy_w)
sum(dummy_w == 8)/1e4
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- ifelse(p.grid < .5, 0, 1)
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- ifelse(p.grid < .5, 0, 1)
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- ifelse(p_grid < .5, 0, 1)
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
rethinking::HPDI(samples, prob = .90)
dummy_w <- rbinom(1e4, 15, prob = samples)
table(dummy_w)
sum(dummy_w == 8)/1e4
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
nsims = 1e4
sim_p <- runif( nsims, 0, 1)
sim_w <- rbinom( nsims, 9, sim_p)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
library(tidyverse)
library(cowplot)
library(flextable)
library(rethinking)
simplehist(sim_w)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
set.seed(128)
nsims <- 1e4
sim_mu = rnorm( nsims, 0, 10)
sim_sig = rexp( nsims, 1)
sim_y = rnorm( nsims, sim_mu, sim_sigma)
set.seed(128)
nsims <- 1e4
sim_mu = rnorm( nsims, 0, 10)
sim_sig = rexp( nsims, 1)
sim_y = rnorm( nsims, sim_mu, sim_sig)
dens(sim_y)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
plot(p_grid, posterior, type = "l")
w <- 6; n <- 9
p_grid <- seq( from=0, to=1, length.out=100 )
posteriror <- dbinom( w,n,p_grid )*dunif( p_grid,0,1 )
posteriror <- posteriror / sum(posteriror)
plot(p_grid, posterior, type = "l")
w <- 6; n <- 9
p_grid <- seq( from=0, to=1, length.out=100 )
posterior <- dbinom( w,n,p_grid )*dunif( p_grid,0,1 )
posterior <- posterior / sum(posterior)
plot(p_grid, posterior, type = "l")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
simplehist(sim_w)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
data("Howell1")
data("Howell1")
d <- Howell1
str(d)
precis(d)
d2 <- d[ d$age >= 18, ]
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
data("Howell1")
d <- Howell1
str(d)
precis(d)
d2 <- d[ d$age >= 18, ]
dexp(0:10, rate = 1)
plot(0:10, dexp(0:10, rate = 1), type = "l")
plot(0:10, dexp(0:10, rate = 2), type = "l")
plot(0:10, dexp(0:10, rate = .5), type = "l")
plot(0:10, dexp(0:10, rate = .1), type = "l")
nsims <- 1e4
sim_mu <- rnorm( nsims, 170, 50)
sim_sig <- runif(nsims, 0, 50)
sim_h <- rnorm( nsims, sim_mu, sim_sig)
nsims <- 1e4
set.seed(128)
sim_mu <- rnorm( nsims, 170, 50)
sim_sig <- runif(nsims, 0, 50)
sim_h <- rnorm( nsims, sim_mu, sim_sig)
dens(sim_h)
PI(sim_h, .89)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
mu.list <- seq( from=150, to=160 , length.out=100 )
sigma.list <- seq( from=7 , to=9 , length.out=100 )
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post$LL <- sapply( 1:nrow(post) , function(i) sum(
 dnorm( d2$height , post$mu[i] , post$sigma[i] , log=TRUE ) ) )
mu.list <- seq( from=150, to=160 , length.out=100 )
sigma.list <- seq( from=7 , to=9 , length.out=100 )
mu.list
sigma.list
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post
post$LL <- sapply( 1:nrow(post) , function(i) sum(
dnorm( d2$height , post$mu[i] , post$sigma[i] , log=TRUE ) ) )
sum(dnorm(d2$height))
sum(dnorm(d2$height), log=T)
dnorm(d2$height, post$mu[1], post$sigma[1])
dnorm(d2$height, post$mu[1], post$sigma[1], log = T)
post$prod <- post$LL +
dnorm( post$mu , 170 , 20 , TRUE ) +
dunif( post$sigma , 0 , 50 , TRUE )
post$prod
dnorm( post$mu , 170 , 20 , TRUE )
mu.list <- seq( from=150, to=190 , length.out=200 )
sigma.list <- seq( from=2 , to=18 , length.out=200 )
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post$LL <- sapply( 1:nrow(post) , function(i) sum(
dnorm( d2$height , post$mu[i] , post$sigma[i] , log=TRUE ) ) )
post$prod <- post$LL +
dnorm( post$mu , 170 , 20 , TRUE ) +
dunif( post$sigma , 0 , 50 , TRUE )
post$prob <- exp( post$prod - max(post$prod) )
post$prob
plot(post$mu, post$prob, type = "l")
post %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
post %>%
filter(mu >=150 & mu <= 160) %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()
post %>%
filter(mu >=150 & mu <= 160) %>%
filter(sigma >=7 & mu <= 9) %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()
post %>%
filter(mu >=150 & mu <= 160) %>%
filter(sigma >=7 & sigma <= 9) %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()
post %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point() +
theme_cowplot()
post %>%
filter(mu >=150 & mu <= 160) %>%
filter(sigma >=7 & sigma <= 9) %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()+
theme_cowplot()
post %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point() +
scale_color_gradient(low = "white", high = "#1c5253") +
theme_cowplot()
post %>%
filter(mu >=150 & mu <= 160) %>%
filter(sigma >=7 & sigma <= 9) %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point()+
scale_color_gradient(low = "white", high = "#1c5253") +
theme_cowplot()
# values of mu and sigma to test
mu.list <- seq( from=150, to=160 , length.out=200 )
sigma.list <- seq( from=7 , to=9 , length.out=200 )
# fit every possible combination of m and s
post <- expand.grid( mu=mu.list , sigma=sigma.list )
# calculate log-likelihood of heights for each combination of m and s
post$LL <- sapply( 1:nrow(post) , function(i) sum(
dnorm( d2$height , post$mu[i] , post$sigma[i] , log=TRUE ) ) )
# add priors
post$prod <- post$LL +
dnorm( post$mu , 170 , 20 , TRUE ) +
dunif( post$sigma , 0 , 50 , TRUE )
# convert from LL to p
post$prob <- exp( post$prod - max(post$prod) )
post %>%
ggplot(aes(x = mu, y = sigma, color = prob)) +
geom_point() +
scale_color_gradient(low = "white", high = "#1c5253") +
theme_cowplot()
flist <- alist(
height ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 178 , 20 ) ,
sigma ~ dunif( 0 , 50 )
)
m4.1 <- quap( flist , data=d2 )
precis( m4.1 )
precis(d)
precis( m4.1 , hist =T)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
vcov( m4.1 )
vcov( m4.1 )
diag( vcov( m4.1 ) )
cov2cor( vcov( m4.1 ) )
post <- extract.samples( m4.1 , n=1e4 )
head(post)
precis(post)
rmarkdown::render("lectures/lecture02-1.Rmd", output_format = "xaringan::moon_reader")
