iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
datl$u <- NA
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
get_prior(mvbf(d_formula, a_formula, u_formula))
get_prior(mvbf(d_formula, a_formula, u_formula), data = datl)
priors2 <- c(
# Priors for latent variable
prior(normal(0, 1), class = "Intercept", resp = "u"),
# Priors for department choice model
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "gamma"),
# Priors for acceptance model
prior(normal(0, 1), nlpar = "alpha"),
prior(normal(0, 1), nlpar = "beta")
)
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
default_prior(mvbf(d_formula, a_formula, u_formula), data = datl)
priors2 <- default_prior( mvbf(d_formula, a_formula, u_formula),
data = datl)
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
priors2
filter(!(class == "sigma" & resp %in% c("A", "D"))
priors2 <- default_prior( mvbf(d_formula, a_formula, u_formula),
data = datl) %>%
filter(!(class == "sigma" & resp %in% c("A", "D")))
library(tidyverse)
priors2 <- default_prior( mvbf(d_formula, a_formula, u_formula),
data = datl) %>%
filter(!(class == "sigma" & resp %in% c("A", "D")))
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
priors2 <- default_prior( mvbf(d_formula, a_formula, u_formula),
data = datl) %>%
filter(!(class == "sigma" & resp %in% c("A", "D", "D2")))
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
View(datl)
datl$u[sample(1:nrow(datl), 1)] <- rnorm(1)
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
stan_model_args = list(
stanvars = stanvar(
scode = paste(gamma_constraints, beta_constraints, collapse = "; "),
block = "parameters"
)
)
)
# Fit the model with all formulas
brm_model <- brm(
mvbf(d_formula, a_formula, u_formula),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = priors2,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 15),
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u ~ 1)
),
data = datl,
family = c(bernoulli(), bernoulli(), gaussian()),
prior = c(
# A model priors
prior(normal(0, 1), nlpar = "a"),
prior(normal(0, 1), nlpar = "b"),
# D2 model priors
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "g"),
# Prior for u
prior(normal(0, 1), class = "Intercept", resp = "u")
),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u ~ 1)
),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c(
# A model priors
prior(normal(0, 1), nlpar = "a"),
prior(normal(0, 1), nlpar = "b"),
# D2 model priors
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "g"),
# Prior for u
prior(normal(0, 1), class = "Intercept", resp = "u")
),
chains = 4,
cores = 4
)
library(brms)
set.seed(12)
N <- 2000 # number of applicants
# even gender distribution
G <- sample( 1:2 , size=N , replace=TRUE )
# sample ability, high (1) to average (0)
u <- rethinking::rbern(N,0.1)
# gender 1 tends to apply to department 1, 2 to 2
# and G=1 with greater ability tend to apply to 2 as well
D <- rethinking::rbern( N , ifelse( G==1 , u*1 , 0.75 ) ) + 1
# matrix of acceptance rates [dept,gender]
p_u0 <- matrix( c(0.1,0.1,0.1,0.3) , nrow=2 )
p_u1 <- matrix( c(0.3,0.3,0.5,0.5) , nrow=2 )
p_u <- list( p_u0 , p_u1 )
# simulate acceptance
p <- sapply( 1:N , function(i) p_u[[1+u[i]]][D[i],G[i]] )
A <- rethinking::rbern( N , p )
dat_sim = data.frame( D, G, A)
datl <- dat_sim
datl$D2 <- ifelse(datl$D==2,1,0)
datl$N <- length(datl$D)
datl$b <- c(1,1)
datl$g <- c(1,0)
datl$u <- NA
datl$u[sample(1:nrow(datl), 3)] <- rnorm(1)
# ulam --------------------------------------------------------------------
mGDu <- ulam(
alist(
# A model
A ~ bernoulli(p),
logit(p) <- a[G,D] + b[G]*u[i],
matrix[G,D]:a ~ normal(0,1),
# D model
D2 ~ bernoulli(q),
logit(q) <- delta[G] + g[G]*u[i],
delta[G] ~ normal(0,1),
# declare unobserved u
vector[N]:u ~ normal(0,1)
), data=datl, chains=4, cores=4 )
set.seed(12)
N <- 2000 # number of applicants
# even gender distribution
G <- sample( 1:2 , size=N , replace=TRUE )
# sample ability, high (1) to average (0)
u <- rethinking::rbern(N,0.1)
# gender 1 tends to apply to department 1, 2 to 2
# and G=1 with greater ability tend to apply to 2 as well
D <- rethinking::rbern( N , ifelse( G==1 , u*1 , 0.75 ) ) + 1
# matrix of acceptance rates [dept,gender]
p_u0 <- matrix( c(0.1,0.1,0.1,0.3) , nrow=2 )
p_u1 <- matrix( c(0.3,0.3,0.5,0.5) , nrow=2 )
p_u <- list( p_u0 , p_u1 )
# simulate acceptance
p <- sapply( 1:N , function(i) p_u[[1+u[i]]][D[i],G[i]] )
A <- rethinking::rbern( N , p )
dat_sim = data.frame( D, G, A)
datl <- dat_sim
datl$D2 <- ifelse(datl$D==2,1,0)
datl$N <- length(datl$D)
datl$b <- c(1,1)
datl$g <- c(1,0)
datl$u <- NA
datl$u[sample(1:nrow(datl), 3)] <- rnorm(1)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u ~ 1) + set_rescor(FALSE)
),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c(
# A model priors
prior(normal(0, 1), nlpar = "a"),
prior(normal(0, 1), nlpar = "b"),
# D2 model priors
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "g"),
# Prior for u
prior(normal(0, 1), class = "Intercept", resp = "u")
),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1) + set_rescor(FALSE)
),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c(
# A model priors
prior(normal(0, 1), nlpar = "a"),
prior(normal(0, 1), nlpar = "b"),
# D2 model priors
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "g"),
# Prior for u
prior(normal(0, 1), class = "Intercept", resp = "u")
),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1)
),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c(
# A model priors
prior(normal(0, 1), nlpar = "a"),
prior(normal(0, 1), nlpar = "b"),
# D2 model priors
prior(normal(0, 1), nlpar = "delta"),
prior(normal(0, 1), nlpar = "g"),
# Prior for u
prior(normal(0, 1), class = "Intercept", resp = "u")
),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1)
),
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = default_prior(),
chains = 4,
cores = 4
)
formula = mvbf(
# Acceptance model
bf(A ~ a + b * mi(u), a ~ 0 + G:factor(D), b ~ 0 + G, nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u), delta ~ 0 + G, g ~ 0 + G, nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1)
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
formula,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = default_prior(formula),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
formula,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = default_prior(formula, data = datl),
chains = 4,
cores = 4
)
?default_prior
# Build the multivariate model with missing indicator for u
brm_model <- brm(
formula,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = default_prior(formula, family = list(bernoulli(), bernoulli(), gaussian()), data = datl),
chains = 4,
cores = 4
)
model = mvbf(
# Acceptance model
bf(A ~ a + b * mi(u),
a ~ G*D2,
b ~ 1 + G,
nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u),
delta ~ 1 + G,
g ~ 1 + G,
nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1)
)
model = mvbf(
# Acceptance model
bf(A ~ a + b * mi(u),
a ~ G*D2,
b ~ 1 + G,
nl = TRUE),
# Department choice model
bf(D2 ~ delta + g * mi(u),
delta ~ 1 + G,
g ~ 1 + G,
nl = TRUE),
# Model the latent variable
bf(u | mi() ~ 1)
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
bmodel,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c( prior(normal(0,1), class = Intercept, resp = A),
prior(normal(0,1), class = Intercept, resp = D2),
prior(normal(0,1), class = b, resp = A),
prior(normal(0,1), class = b, resp = D2)),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
model,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c( prior(normal(0,1), class = Intercept, resp = A),
prior(normal(0,1), class = Intercept, resp = D2),
prior(normal(0,1), class = b, resp = A),
prior(normal(0,1), class = b, resp = D2)),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
model,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c( prior(normal(0,1), class = Intercept, resp = a),
prior(normal(0,1), class = Intercept, resp = b),
prior(normal(0,1), class = Intercept, resp = delta),
prior(normal(0,1), class = Intercept, resp = g),
prior(normal(0,1), class = b, resp = a),
prior(normal(0,1), class = b, resp = b),
prior(normal(0,1), class = b, resp = delta),
prior(normal(0,1), class = b, resp = g)),
chains = 4,
cores = 4
)
default_prior(model, data = datl, family = list(bernoulli(), bernoulli(), gaussian()))
# Build the multivariate model with missing indicator for u
brm_model <- brm(
model,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c( prior(normal(0,1), class = Intercept, resp = A),
prior(normal(0,1), class = Intercept, resp = D2),
prior(normal(0,1), class = Intercept, resp = u),
prior(normal(0,1), class = b, resp = A),
prior(normal(0,1), class = b, resp = D2),
prior(exponential(1), class = sigma, response = u)),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
model,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c( prior(normal(0,1), class = Intercept, resp = A),
prior(normal(0,1), class = Intercept, resp = D2),
prior(normal(0,1), class = Intercept, resp = u),
prior(normal(0,1), class = b, resp = A),
prior(normal(0,1), class = b, resp = D2),
prior(exponential(1), class = sigma, resp = u)),
chains = 4,
cores = 4
)
# Build the multivariate model with missing indicator for u
brm_model <- brm(
model,
data = datl,
family = list(bernoulli(), bernoulli(), gaussian()),
prior = c(
# prior(normal(0,1), class = Intercept, resp = A),
#          prior(normal(0,1), class = Intercept, resp = D2),
#          prior(normal(0,1), class = Intercept, resp = u),
# prior(normal(0,1), class = b, resp = A),
# prior(normal(0,1), class = b, resp = D2),
prior(exponential(1), class = sigma, resp = u)),
chains = 4,
cores = 4
)
