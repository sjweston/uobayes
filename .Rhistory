prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=9, chains=1,
file = here("files/models/31.6")
)
d2 <- d[d$age >= 18, ]
d2$A <- standardize(d2$age)
d2$mid <- as.factor(d2$married + 1)
m6 <- brm(
data=d2,
family=gaussian,
bf( happiness ~ 0 + a + b*A,
a ~ 0 + mid,
b ~ 0 + mid,
nl = TRUE),
prior = c( prior(normal(0, .50), nlpar=a),
prior(normal(0, .25), nlpar=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=9, chains=1,
file = here("files/models/31.6")
)
d2 <- d[d$age >= 18, ]
d2$A <- standardize(d2$age)
d2$mid <- as.factor(d2$married + 1)
m6 <- brm(
data=d2,
family=gaussian,
bf( happiness ~ 0 + a + b*A,
a ~ 0 + mid,
b ~ 0 + mid,
nl = TRUE),
prior = c( prior(normal(0, .50), nlpar=a),
prior(normal(0, .25), nlpar=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=9, chains=1,
file = here("files/models/31.6")
)
posterior_summary(m6)
m7 <- brm(
data=d2,
family=gaussian,
happiness ~ A,
prior = c( prior(normal(0, .50), class=Intercept),
prior(normal(0, .25), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=9, chains=1,
file = here("files/models/31.7")
)
posterior_summary(m7)
posterior_summary(m7) %>% round(2)
posterior_summary(m6) %>% round(2)
post6 = as_draws_df(m6)
post7 = as_draws_df(m7)
as_draws_df(m7)
cbind(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A)
cbind(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
))
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
))
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
)) %>%
ggplot(aes( y=name, x=value)) +
stat_halfeye()
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
)) %>%
ggplot(aes( y=name, x=valuefill = after_stat(x > 0) ) )  +
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
)) %>%
ggplot(aes( y=name, x=value, fill = after_stat(x > 0) ) )  +
stat_halfeye() +
geom_vline(xintercept=0, linetype="dashed") +
scale_fill_manual(values=c("grey", "#1c5253")) +
guides(fill="none") +
labs(x="Marriage effect", y=NULL)
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
)) %>%
ggplot(aes( y=name, x=value, fill = after_stat(x > 0) ) )  +
stat_halfeye() +
geom_vline(xintercept=0, linetype="dashed") +
scale_fill_manual(values=c("grey", "#1c5253")) +
guides(fill="none") +
labs(x="Age effect", y=NULL)
data.frame(b_b_mid1 = post6$b_b_mid1,
b_b_mid2 = post6$b_b_mid2,
b_A = post7$b_A) %>%
pivot_longer(everything()) %>%
mutate(name = case_when(
str_detect(name, "1") ~ "Within unmarried",
str_detect(name, "2") ~ "Within married",
TRUE ~ "Unstratified"
)) %>%
ggplot(aes( y=name, x=value, fill = after_stat(x < 0) ) )  +
stat_halfeye() +
geom_vline(xintercept=0, linetype="dashed") +
scale_fill_manual(values=c("grey", "#1c5253")) +
guides(fill="none") +
labs(x="Age effect", y=NULL)
??drawdag
library(dagitty)
dag3.1 <- dagitty( "dag{ Z -> X; Z -> Y }" )
coordinates(dag3.1) <- list( x=c(X=-1,Z=0,Y=1) , y=c(X=0,Z=-1,Y=0) )
rethinking::drawdag( dag3.1, cex = 3, lwd = 3 )
# Chunk 1
library(tidyverse)
library(psych)
library(cowplot)
library(patchwork)
library(here)
library(brms)
library(tidybayes)
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
data(reedfrogs, package = "rethinking")
d <- reedfrogs
dim(d)
d %>% sample_n(10)
# Chunk 4
d$tank = factor(1:nrow(d))
m1 <-
brm(data = d,
family = binomial,
bf(surv | trials(density) ~ 0 + alpha,
alpha ~ 0 + tank,
nl = TRUE),
prior(normal(0, 1.5), class = b, nlpar=alpha),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
seed = 13,
file = here("files/models/71.1"))
# Chunk 5
print(m1)
# Chunk 6
#| code-fold: true
# get posterior
post <- as_draws_df(m1)
# transform logit to probability
p1 <- post %>%
pivot_longer(starts_with("b_alpha"),
names_prefix = "b_alpha_tank",
values_to = "logit") %>%
mutate(prob = logistic(logit),
tank = as.numeric(name)) %>%
ggplot( aes (x = tank, y = prob)) +
stat_gradientinterval(alpha = .3, color="#5e8485") +
geom_point( aes(x=as.numeric(tank), y=propsurv),
data=d) +
labs(title = "Unpooled model")
p1
# Chunk 7
m2 <-
brm(data = d,
family = binomial,
surv | trials(density) ~ 1 + (1 | tank),
prior = c(prior(normal(0, 1.5), class = Intercept),  # alpha bar
prior(exponential(1), class = sd)),        # sigma
iter = 5000, warmup = 1000, chains = 4, cores = 4,
sample_prior = "yes",
seed = 13,
file = here("files/models/71.2"))
# Chunk 8
print(m2)
# Chunk 9
posterior_summary(m2) %>% round(2)
# Chunk 10
gather_draws(m2, r_tank[tank, ]) %>%
mean_qi() %>%
ggplot(aes( y=tank, x=.value )) +
geom_point() +
geom_errorbar( aes(xmin=.lower, xmax=.upper ), alpha=.5) +
geom_vline(xintercept = 0) +
labs(x="Varying intercepts")
# Chunk 11
#| code-fold: true
m1 <- add_criterion(m1, "waic")
m2 <- add_criterion(m2, "waic")
w <- loo_compare(m1, m2, criterion = "waic")
print(w, simplify = F)
# Chunk 12
#| code-fold: true
#average survival
post_sum = posterior_summary(m2)
average_surv = post_sum["b_Intercept", "Estimate"]
p2 <- gather_draws(m2, r_tank[tank, Intercept]) %>%
mutate(prob = logistic(.value+average_surv)) %>%
ggplot( aes (x = tank, y = prob)) +
stat_gradientinterval(alpha = .3, color="#5e8485") +
geom_point( aes(x=as.numeric(tank), y=propsurv),
data=d ) +
geom_hline( aes(yintercept = logistic(average_surv)),
linetype = "dashed")+
labs(title = "Partial pooling model")
p2
# Chunk 13
p1 / p2
# Try different priors for sigma (tank varying effects SD)
sigmas <- c(0.5, 1, 2, 4)
models <- list()
# Try different priors for sigma (tank varying effects SD)
sigmas <- c(0.5, 1, 2, 4)
models <- list()
# Fit models with different priors
for(i in seq_along(sigmas)) {
models[[i]] <- brm(
surv | trials(density) ~ 1 + (1|tank),
data = d,
family = binomial,
prior = c(
prior(normal(0, 1.5), class = "Intercept"),
prior(exponential(1/sigmas[i]), class = "sd")
),
cores = 4,
seed = 123
)
# Add WAIC criterion
models[[i]] <- add_criterion(models[[i]], "waic")
}
sigmas[i]
1/sigmas[i]
# Try different priors for sigma (tank varying effects SD)
sigmas <- c(0.5, 1, 2, 4)
# Fit models with different priors using lapply
models <- lapply(sigmas, function(sigma) {
model <- brm(
surv | trials(density) ~ 1 + (1|tank),
data = d,
family = binomial,
prior = c(
prior(normal(0, 1.5), class = "Intercept"),
prior(exponential(1/sigma), class = "sd")
),
cores = 4,
seed = 123
)
# Add WAIC criterion
add_criterion(model, "waic")
})
model <- brm(
surv | trials(density) ~ 1 + (1|tank),
data = d,
family = binomial,
prior = c(
prior(normal(0, 1.5), class = "Intercept"),
prior(exponential(1/1), class = "sd")
),
cores = 4,
seed = 123
)
mod2 = update(model, prior = prior(exponential(1/2), class="sd"))
# set population-level parameters
a <- 3.5       # average morning wait time
b <- (-1)      # average difference afternoon wait time
sigma_a <- 1   # std dev in intercepts
sigma_b <- 0.5 # std dev in slopes
rho <- (-0.7)  #correlation between intercepts and slopes
# create vector of means
Mu <- c(a, b)
# create matrix of variances and covariances
cov_ab <- sigma_a*sigma_b*rho
Sigma <- matrix( c(sigma_a^2,cov_ab,cov_ab,sigma_b^2) , ncol=2 )
library(MASS)
set.seed(5)
sim_data <-
```
# ---- set population-level parameters -----
a <- 3.5       # average morning wait time
b <- (-1)      # average difference afternoon wait time
sigma_a <- 1   # std dev in intercepts
sigma_b <- 0.5 # std dev in slopes
rho <- (-0.7)  #correlation between intercepts and slopes
# ---- create vector of means ----
Mu <- c(a, b)
# ---- create matrix of variances and covariances ----
sigmas <- c(sigma_a,sigma_b) # standard deviations
Rho <- matrix( c(1,rho,rho,1) , nrow=2 ) # correlation matrix
# now matrix multiply to get covariance matrix
Sigma <- diag(sigmas) %*% Rho %*% diag(sigmas)
# ---- simulate data -----
N_cafes = 20
library(MASS)
set.seed(5)
sim_data <- mvrnorm( n=N_cafes, mu = Mu, Sigma=Sigma)
head(sim_data)
library(MASS)
set.seed(5)
vary_effects <- mvrnorm( n=N_cafes, mu = Mu, Sigma=Sigma)
set.seed(22)
N_visits <- 10
afternoon <- rep(0:1,N_visits*N_cafes/2)
cafe_id <- rep( 1:N_cafes , each=N_visits )
mu <- a_cafe[cafe_id] + b_cafe[cafe_id]*afternoon
a_cafe <- vary_effects[, 1]
b_cafe <- vary_effects[, 2]
set.seed(22)
N_visits <- 10
afternoon <- rep(0:1,N_visits*N_cafes/2)
cafe_id <- rep( 1:N_cafes , each=N_visits )
mu <- a_cafe[cafe_id] + b_cafe[cafe_id]*afternoon
mu
sigma <- 0.5 # std dev within cafes
wait <- rnorm( N_visits*N_cafes , mu , sigma )
d <- data.frame( cafe=cafe_id , afternoon=afternoon , wait=wait )
View(d)
R = rethinking::rlkjcorr(1e4, 2, 2)
R[, 1]
R[, 1, 2]
str(R)
R[, 1, 1]
R[, 1, 2]
R[, 2, 1]
R[, 2, 2]
R = rethinking::rlkjcorr(1e4, 3, 2)
str(R)
# examples
rlkj_1 = rethinking::rlkjcorr(1e4, K=2, eta=1)
rlkj_2 = rethinking::rlkjcorr(1e4, K=2, eta=2)
rlkj_4 = rethinking::rlkjcorr(1e4, K=2, eta=4)
data.frame(rlkj_1, rlkj_2, rlkj_4)
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2])
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1"))
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1")) +
geom_density(aes(x=rlkj_2, color = "2")) +
geom_density(aes(x=rlkj_4, color = "4"))
# examples
rlkj_1 = rethinking::rlkjcorr(1e4, K=2, eta=1)
rlkj_2 = rethinking::rlkjcorr(1e4, K=2, eta=2)
rlkj_4 = rethinking::rlkjcorr(1e4, K=2, eta=4)
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1", fill = "1"), alpha=.3) +
geom_density(aes(x=rlkj_2, color = "2", fill = "2"), alpha=.3) +
geom_density(aes(x=rlkj_4, color = "4", fill = "4"), alpha=.3)
# examples
rlkj_1 = rethinking::rlkjcorr(1e4, K=2, eta=1)
rlkj_2 = rethinking::rlkjcorr(1e4, K=2, eta=2)
rlkj_4 = rethinking::rlkjcorr(1e4, K=2, eta=4)
rlkj_6 = rethinking::rlkjcorr(1e4, K=2, eta=6)
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2],
rlkj_6= rlkj_6[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1", fill = "1"), alpha=.3) +
geom_density(aes(x=rlkj_2, color = "2", fill = "2"), alpha=.3) +
geom_density(aes(x=rlkj_4, color = "4", fill = "4"), alpha=.3) +
geom_density(aes(x=rlkj_6, color = "6", fill = "6"), alpha=.3)
# examples
rlkj_1 = rethinking::rlkjcorr(1e4, K=2, eta=1)
rlkj_2 = rethinking::rlkjcorr(1e4, K=2, eta=2)
rlkj_4 = rethinking::rlkjcorr(1e4, K=2, eta=4)
rlkj_6 = rethinking::rlkjcorr(1e4, K=2, eta=6)
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2],
rlkj_6= rlkj_6[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1"), alpha=.3) +
geom_density(aes(x=rlkj_2, color = "2"), alpha=.3) +
geom_density(aes(x=rlkj_4, color = "4"), alpha=.3) +
geom_density(aes(x=rlkj_6, color = "6"), alpha=.3)
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2],
rlkj_6= rlkj_6[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1"), alpha=.3) +
geom_density(aes(x=rlkj_2, color = "2"), alpha=.3) +
geom_density(aes(x=rlkj_4, color = "4"), alpha=.3) +
geom_density(aes(x=rlkj_6, color = "6"), alpha=.3) +
labs(x="R", color="eta")
data.frame(rlkj_1= rlkj_1[,1,2],
rlkj_2= rlkj_2[,1,2],
rlkj_4= rlkj_4[,1,2],
rlkj_6= rlkj_6[,1,2]) %>%
ggplot() +
geom_density(aes(x=rlkj_1, color = "1"), alpha=.3) +
geom_density(aes(x=rlkj_2, color = "2"), alpha=.3) +
geom_density(aes(x=rlkj_4, color = "4"), alpha=.3) +
geom_density(aes(x=rlkj_6, color = "6"), alpha=.3) +
labs(x="R", color="eta") +
theme(legend.position = "top")
m3 <- brm(
data = d,
family = gaussian,
wait ~ 1 + afternoon + (1 + afternoon | cafe),
prior = c(
prior( normal(5,2),    class=Intercept ),
prior( normal(-1, .5), class=b),
prior( exponential(1), class=sd),
prior( exponential(1), class=sigma),
prior( lkj(2),         class=cor)
),
iter=2000, warmup=1000, chains=4, cores=4, seed=9,
file=here("files/models/73.3")
)
posterior_summary(m3)
spread_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, ])
spread_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, ]) %>% View()
spread_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, Intercept]) %>% View()
coef(m3)
coef(m3) %>% as.data.frame()
gather_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, ]) %>% View()
gather_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, term]) %>% View()
spread_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, term]) %>% View()
spread_draws(m3,
b_Intercept, b_afternoon, # average effects
r_cafe[cafe, term]) %>%
pivot_wider(names_from = term, values_from = r_cafe) %>% View()
posterior_summary(m3)
coef(m3)
coef(m3)$cafe
coef(m3)$cafe[, , "Intercept"]
intercepts = coef(m3)$cafe[, , "Intercept"]
slopes = coef(m3)$cafe[, , "afternoon"]
data.frame(
cafe=1:20,
intercepts=intercepts$Estimate
)
insurance <- read.csv("https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv")
View(insurance)
library(dagitty)
dag3 <- dagitty( "dag{ area -> avgfood; avgfood -> groupsize; avgfood -> weight; groupsize -> weight }" )
coordinates(dag3) <- list( x=c(area=0,avgfood=-1,groupsize=1, weight=0) ,
y=c(area=-1,avgfood=0,groupsize=0, weight=1) )
rethinking::drawdag( dag3, cex = 3, lwd = 3 )
library(dagitty)
dag3 <- dagitty( "dag{ area -> avgfood; avgfood -> groupsize; avgfood -> weight; groupsize -> weight }" )
coordinates(dag3) <- list( x=c(area=0,avgfood=-1,groupsize=1, weight=0) ,
y=c(area=-1,avgfood=0,groupsize=0, weight=1) )
rethinking::drawdag( dag3, cex = 2, lwd = 3 )
library(dagitty)
dag3 <- dagitty( "dag{ area -> avgfood; avgfood -> groupsize; avgfood -> weight; groupsize -> weight }" )
coordinates(dag3) <- list( x=c(area=0,avgfood=-1,groupsize=1, weight=0) ,
y=c(area=-1,avgfood=0,groupsize=0, weight=1) )
rethinking::drawdag( dag3, cex = 1, lwd = 3 )
