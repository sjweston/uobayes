milk$K <- rethinking::standardize(milk$kcal.per.g)
m2 <- brm(
data=milk,
family=gaussian,
bf(K ~ 0 + a,
a ~ 0 + clade_id,
nl = TRUE),
prior = c( prior(normal(0,.5), class=b, nlpar=a),
prior(exponential(1), class=sigma)),
iter = 2000, warmup = 1000, seed = 3, chains=1,
file = here("files/models/22.2")
)
posterior_summary(m2)
m2b <- brm(
data=milk,
family=gaussian,
bf(K ~ 1 + clade_id),
prior = c( prior(normal(0,.5), class=Intercept),
prior(normal(0,.5), class=b),
prior(exponential(1), class=sigma)),
iter = 2000, warmup = 1000, seed = 3, chains=1
)
posterior_summary(m2b)
posterior_summary(m2)
post <- as_draws_df( m2 )
post %>%
pivot_longer(starts_with("b")) %>%
mutate(
name = str_extract(name, "[0-9]"),
name = factor(name, labels = levels(milk$clade))) %>%
ggplot(aes(x = value, color = name)) +
geom_density(linewidth = 2) +
labs(title = "Posterior distribution of expected milk energy") +
theme(legend.position = "bottom")
test = lm(K ~ 0 + clade_id, data=milk)
summary(test)
test = lm(K ~ clade_id, data=milk)
summary(test)
loo_m1 = loo(m1)
loo(m1)
loo(m2)
loo_compare( m1, m2 )
loo_m1 = loo(m1)
loo_m2 = loo(m2)
loo_compare( m1, m2 )
loo_compare( loo_m1, loo_m2 )
posterior_summary(m1)
# Chunk 1
library(tidyverse)
library(cowplot)
library(brms)
library(tidybayes)
library(patchwork)
library(here)
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
#| code-fold: true
sppnames <- c( "afarensis","africanus","habilis","boisei","rudolfensis","ergaster","sapiens")
brainvolcc <- c( 438 , 452 , 612, 521, 752, 871, 1350 )
masskg <- c( 37.0 , 35.5 , 34.5 , 41.5 , 55.5 , 61.0 , 53.5 )
d <- data.frame( species=sppnames , brain=brainvolcc , mass=masskg )
base = d %>%
ggplot(aes(x=masskg, y=brainvolcc)) +
geom_point() +
geom_text(aes(label=sppnames), hjust=0, nudge_x = 1) +
labs(x="body mass (kg)", y="brain volume (cc)")
p1 = base + geom_smooth(method='lm', se =F) +ggtitle("Simple linear model")
p2 = base + geom_smooth(method='lm', se =F, formula=y~poly(x, 6)) +ggtitle("6th degree polynomial")
(p1 | p2)
# Chunk 4
#| code-fold: true
#|
d$mass_std <- rethinking::standardize(d$mass)
d$brain_std <- d$brain / max(d$brain)
m1 <- brm(
data=d,
family=gaussian,
brain_std ~ mass_std,
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.1"))
m2 <-
update(m1,
newdata = d,
brain_std ~ 1 + mass_std + I(mass_std^2) +
I(mass_std^3) + I(mass_std^4) + I(mass_std^5),
iter=2000, warmup=1000, chains=1, seed = 5,
control = list(adapt_delta = .99999),
file = here("files/models/41.2"))
brain_loo_lines <- function(brms_fit, row, ...) {
# refit the model
new_fit <-
update(brms_fit,
newdata = filter(d, row_number() != row),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
seed = 7,
refresh = 0,
...)
# pull the lines values
fitted(new_fit,
newdata = nd) %>%
data.frame() %>%
select(Estimate) %>%
bind_cols(nd)
}
m1_fits <-
tibble(row = 1:7) %>%
mutate(post = purrr::map(row, ~brain_loo_lines(brms_fit = m1, row = .))) %>%
unnest(post)
m1_fits <-
tibble(row = 1:7) %>%
mutate(post = purrr::map(row, ~brain_loo_lines(brms_fit = m1, row = .))) %>%
unnest(post)
# define the new data
nd <- tibble(mass_std = seq(from = -2, to = 2, length.out = 200))
brain_loo_lines <- function(brms_fit, row, ...) {
# refit the model
new_fit <-
update(brms_fit,
newdata = filter(d, row_number() != row),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
seed = 7,
refresh = 0,
...)
# pull the lines values
fitted(new_fit,
newdata = nd) %>%
data.frame() %>%
select(Estimate) %>%
bind_cols(nd)
}
m1_fits <-
tibble(row = 1:7) %>%
mutate(post = purrr::map(row, ~brain_loo_lines(brms_fit = m1, row = .))) %>%
unnest(post)
m2_fits <-
tibble(row = 1:7) %>%
mutate(post = purrr::map(row, ~brain_loo_lines(brms_fit = m2,
row = .,
control = list(adapt_delta = .999)))) %>%
unnest(post)
# left
p1 <-
m1_fits %>%
ggplot(aes(x = mass_std)) +
geom_line(aes(y = Estimate, group = row),
color = "#1c5253", linewidth = 1/2, alpha = 1/2) +
geom_point(data = d,
aes(y = brain_std),
color = "#1c5253") +
labs(subtitle = "b7.1",
x = "body mass (std)",
y = "brain volume (std)") +
coord_cartesian(xlim = range(d$mass_std),
ylim = range(d$brain_std))
# right
p2 <-
m2_fits %>%
ggplot(aes(x = mass_std, y = Estimate)) +
geom_line(aes(group = row),
color = "#1c5253", linewidth = 1/2, alpha = 1/2) +
geom_point(data = d,
aes(y = brain_std),
color = "#1c5253") +
labs(subtitle = "b7.4",
x = "body mass (std)",
y = "brain volume (std)") +
coord_cartesian(xlim = range(d$mass_std),
ylim = c(-0.1, 1.4))
p1 + p2
#| code-fold: true
# Set up plotting area
plot(0, 0, type = "n", xlim = c(-3, 3), ylim = c(0, 2),
xlab = "parameter value", ylab = "Density",
main = "")
# Create x-values for plotting
x <- seq(-3, 3, length.out = 1000)
# Generate three density curves with different spreads
# Thick curve - very peaked (high kurtosis)
y1 <- dnorm(x, mean = 0, sd = 0.3)
# Scale to match the peak height in the original
y1 <- y1 * (2/max(y1))
# Medium curve - moderate spread
y2 <- dnorm(x, mean = 0, sd = 0.6)
# Scale to match the peak height in the original
y2 <- y2 * (0.8/max(y2))
# Dashed curve - most spread (normal distribution)
y3 <- dnorm(x, mean = 0, sd = 1)
# Scale to match the peak height in the original
y3 <- y3 * (0.4/max(y3))
# Add the curves to the plot
lines(x, y1, lwd = 3)
lines(x, y2, lwd = 1)
lines(x, y3, lwd = 1, lty = 2)
#| code-line-numbers: "7"
m3a <- brm(
data=d,
family=gaussian,
brain_std ~ 1 + mass_std + I(mass_std^2) +
I(mass_std^3) + I(mass_std^4) + I(mass_std^5) + I(mass_std^6),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.3a"))
#| code-line-numbers: "7"
m3b <- brm(
data=d,
family=gaussian,
brain_std ~ 1 + mass_std + I(mass_std^2) +
I(mass_std^3) + I(mass_std^4) + I(mass_std^5) + I(mass_std^6),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, .05), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.3b"))
#| code-fold: true
nd = data.frame(mass_std = seq(min(d$mass_std), max(d$mass_std), length.out=100))
pred_3a = add_epred_draws(nd, m3a) %>% filter(.draw <= 20)
pred_3b = add_epred_draws(nd, m3b) %>% filter(.draw <= 20)
p1 = pred_3a %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p2 = pred_3b %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p1 + p2
# Function to calculate entropy: H(p) = -sum(p_i * log2(p_i))
calculate_entropy <- function(probabilities) {
# Handle zero probabilities (log(0) is undefined)
probabilities <- probabilities[probabilities > 0]
-sum(probabilities * log2(probabilities))
}
# Create two distributions
# 1. High entropy: Uniform distribution (maximum entropy)
high_entropy_dist <- rep(1/10, 10)  # 10 equally likely outcomes
# 2. Low entropy: Highly skewed distribution
low_entropy_dist <- c(0.91, rep(0.01, 9))  # One highly likely outcome, others unlikely
# Calculate entropy values
high_entropy_value <- calculate_entropy(high_entropy_dist)
low_entropy_value <- calculate_entropy(low_entropy_dist)
# Prepare data for plotting
high_entropy_df <- data.frame(
Outcome = 1:10,
Probability = high_entropy_dist,
Distribution = "High Entropy"
)
low_entropy_df <- data.frame(
Outcome = 1:10,
Probability = low_entropy_dist,
Distribution = "Low Entropy"
)
# Combine data frames
plot_data <- rbind(high_entropy_df, low_entropy_df)
# Create labels with entropy values
plot_labels <- c(
"High Entropy" = paste("High Entropy: H =", round(high_entropy_value, 3)),
"Low Entropy" = paste("Low Entropy: H =", round(low_entropy_value, 3))
)
# Plot both distributions
ggplot(plot_data, aes(x = factor(Outcome), y = Probability, fill = Distribution)) +
geom_bar(stat = "identity") +
facet_wrap(~ Distribution, scales = "free_y", labeller = labeller(Distribution = plot_labels)) +
labs(
#title = "Comparison of High and Low Entropy Distributions",
x = "Outcome",
y = "Probability",
fill = "Distribution Type"
) +
guides(fill = FALSE) +
theme_cowplot(font_size = 20) +
theme(
legend.position = "bottom",
strip.text = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 0)
)
m1 <- brm(
data=d,
family=gaussian,
brain_std ~ mass_std,
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.1"))
log_prob = log_lik(m1)
glimpse(log_prob)
prob <- as.data.frame(log_prob) %>%
set_names(pull(d, species)) %>%  # add case names, for convenience
mutate(s = 1:n()) %>% # add an s iteration index, for convenience
# make it long
pivot_longer(-s,
names_to = "species",
values_to = "logprob") %>%
# compute the probability scores
mutate(prob = exp(logprob))
prob
loo_m1 = loo(m1)
loo_m2 = loo(m2)
loo_compare( loo_m1, loo_m2 )
# compare waic
m1 <- add_criterion(m1, criterion = "waic")
m2 <- add_criterion(m2, criterion = "waic")
loo_compare( m1, m2, criteron="waic")
loo_compare( m1, m2, criterion="waic")
loo_compare( m1, m2)
m1 <- add_criterion(m1, criterion = "loo")
?add_criterion
m1 <- add_criterion(m1, criterion = c("loo", "waic"))
m2 <- add_criterion(m2, criterion = c("loo", "waic"))
loo_compare( m1, m2, criterion="loo")
loo_compare( m1, m2, criterion="waic")
#| code-fold: true
sppnames <- c( "afarensis","africanus","habilis","boisei","rudolfensis","ergaster","sapiens")
brainvolcc <- c( 438 , 452 , 612, 521, 752, 871, 1350 )
masskg <- c( 37.0 , 35.5 , 34.5 , 41.5 , 55.5 , 61.0 , 53.5 )
d <- data.frame( species=sppnames , brain=brainvolcc , mass=masskg )
base = d %>%
ggplot(aes(x=masskg, y=brainvolcc)) +
geom_point() +
geom_text(aes(label=sppnames), hjust=0, nudge_x = 1) +
labs(x="body mass (kg)", y="brain volume (cc)")
p1 = base + geom_smooth(method='lm', se =F) +ggtitle("Simple linear model")
p2 = base + geom_smooth(method='lm', se =F, formula=y~poly(x, 6)) +ggtitle("6th degree polynomial")
(p1 | p2)
seq(.0001, 1, length.out=5)
log(seq(.0001, 1, length.out=5))
x = seq(.0001, 1, length.out=100)
y = log(x)
plot(x,y,type="l")
log_prob
log_prob %>% round(3)
?waic
library(loo)
loo(m1)
#| code-fold: true
nd = data.frame(mass_std = seq(min(d$mass_std), max(d$mass_std), length.out=100))
# Chunk 1
library(tidyverse)
library(cowplot)
library(brms)
library(tidybayes)
library(patchwork)
library(here)
# Chunk 2
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
c("#5e8485" , "#0f393a") ,
c("#1c5253" , "#5e8485" , "#0f393a") ,
# palette with 5 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
# same palette interpolated to 8 colours
c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" )
)
options(ggplot2.discrete.fill = default_palettes,
ggplot2.discrete.colour = default_palettes)
# Chunk 3
#| code-fold: true
sppnames <- c( "afarensis","africanus","habilis","boisei","rudolfensis","ergaster","sapiens")
brainvolcc <- c( 438 , 452 , 612, 521, 752, 871, 1350 )
masskg <- c( 37.0 , 35.5 , 34.5 , 41.5 , 55.5 , 61.0 , 53.5 )
d <- data.frame( species=sppnames , brain=brainvolcc , mass=masskg )
base = d %>%
ggplot(aes(x=masskg, y=brainvolcc)) +
geom_point() +
geom_text(aes(label=sppnames), hjust=0, nudge_x = 1) +
labs(x="body mass (kg)", y="brain volume (cc)")
p1 = base + geom_smooth(method='lm', se =F) +ggtitle("Simple linear model")
p2 = base + geom_smooth(method='lm', se =F, formula=y~poly(x, 6)) +ggtitle("6th degree polynomial")
(p1 | p2)
# Chunk 4
#| code-fold: true
# Set up plotting area
plot(0, 0, type = "n", xlim = c(-3, 3), ylim = c(0, 2),
xlab = "parameter value", ylab = "Density",
main = "")
# Create x-values for plotting
x <- seq(-3, 3, length.out = 1000)
# Generate three density curves with different spreads
# Thick curve - very peaked (high kurtosis)
y1 <- dnorm(x, mean = 0, sd = 0.3)
# Scale to match the peak height in the original
y1 <- y1 * (2/max(y1))
# Medium curve - moderate spread
y2 <- dnorm(x, mean = 0, sd = 0.6)
# Scale to match the peak height in the original
y2 <- y2 * (0.8/max(y2))
# Dashed curve - most spread (normal distribution)
y3 <- dnorm(x, mean = 0, sd = 1)
# Scale to match the peak height in the original
y3 <- y3 * (0.4/max(y3))
# Add the curves to the plot
lines(x, y1, lwd = 3)
lines(x, y2, lwd = 1)
lines(x, y3, lwd = 1, lty = 2)
# Chunk 5
#| code-line-numbers: "7"
m3a <- brm(
data=d,
family=gaussian,
brain_std ~ 1 + mass_std + I(mass_std^2) +
I(mass_std^3) + I(mass_std^4) + I(mass_std^5) + I(mass_std^6),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.3a"))
# Chunk 6
#| code-line-numbers: "7"
m3b <- brm(
data=d,
family=gaussian,
brain_std ~ 1 + mass_std + I(mass_std^2) +
I(mass_std^3) + I(mass_std^4) + I(mass_std^5) + I(mass_std^6),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, .05), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.3b"))
#| code-fold: true
nd = data.frame(mass_std = seq(min(d$mass_std), max(d$mass_std), length.out=100))
d
d$mass_std = rethinking::standardize(d$mass)
nd = data.frame(mass_std = seq(min(d$mass_std), max(d$mass_std), length.out=100))
pred_3a = add_epred_draws(nd, m3a) %>% filter(.draw <= 20)
pred_3b = add_epred_draws(nd, m3b) %>% filter(.draw <= 20)
p1 = pred_3a %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p2 = pred_3b %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p1 + p2
d$brain_std = rethinking::standardize(d$brain)
nd = data.frame(mass_std = seq(min(d$mass_std), max(d$mass_std), length.out=100))
pred_3a = add_epred_draws(nd, m3a) %>% filter(.draw <= 20)
pred_3b = add_epred_draws(nd, m3b) %>% filter(.draw <= 20)
p1 = pred_3a %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p2 = pred_3b %>% ggplot(aes(x = mass_std, y=.epred)) +
geom_line(aes(group=.draw), alpha=.3) +
geom_point(aes(y=brain_std), data=d, color = "#1c5253") +
lims(y=c(-2,4)) +
labs(y="Brain size (standardized)")
p1 + p2
m2 <- brm(
data=d,
family=gaussian,
brain_std ~ mass_std + I(mass_std^2) + I(mass_std^3) + I(mass_std^4) + I(mass_std^5),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.2"))
m2 <- brm(
data=d,
family=gaussian,
brain_std ~ mass_std + I(mass_std^2) + I(mass_std^3) + I(mass_std^4) + I(mass_std^5),
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.2"))
m1 <- add_criterion(m1, criterion = c("loo", "waic"))
m2 <- add_criterion(m2, criterion = c("loo", "waic"))
loo_compare( m1, m2, criterion="loo")
loo_compare( m1, m2, criterion="waic")
d <- data.frame( species=sppnames , brain=brainvolcc , mass=masskg )
d <- d %>%
mutate(across(c(mass, brain),
rethinking::standardize, .names = "{.col}_std"))
View(d)
m1 <- brm(
data=d,
family=gaussian,
brain_std ~ mass_std,
prior = c( prior(normal(.5, 1), class=Intercept),
prior(normal(0, 10), class=b),
prior(exponential(1), class=sigma)),
iter=2000, warmup=1000, seed=5, chains=1,
file=here("files/models/41.1"))
m1 <- add_criterion(m1, criterion = c("loo", "waic"))
m2 <- add_criterion(m2, criterion = c("loo", "waic"))
loo_compare( m1, m2, criterion="loo")
loo_compare( m1, m2, criterion="waic")
loo_compare( m1, m2, criterion="loo") %>% print(simplify=F)
