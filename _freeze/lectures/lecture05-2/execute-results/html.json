{
  "hash": "2146799f0950cff74a1e3bfbda9c87f6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"week 5: integers and other monsters\"\nsubtitle: \"counts\"\nformat: \n  revealjs:\n    css: xaringan-themer2.css\n    nature:\n      highlightStyle: solarized-dark\n      highlightLines: true\n      countIncrementalSlides: false\n      mathjax: \"default\"\n    self-contained: false  # Ensures correct embedding\n    embed-resources: true  # Embeds required assets\n    slide-number: true\n    code-annotations: hover\nexecute:\n  echo: false        \n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## populations and tools\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggdag)\n\ndag_coords <-\n  tibble(name = c(\"C\", \"P\", \"L\", \"T\"),\n         x    = c(1, 1, 2, 2),\n         y    = c(2, 1, 2, 1))\n\ndagify(C ~ L + P,\n       P ~ L,\n       T ~ C + L + P,\n       coords = dag_coords) %>%\n  \n  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +\n  geom_dag_point(aes(color = name == \"D\"),\n                 alpha = 1/2, size = 6.5, show.legend = F) +\n  geom_point(x = 2, y = 1, \n             size = 6.5, shape = 1, stroke = 1, color = \"orange\") +\n  geom_dag_text(color = \"black\") +\n  geom_dag_edges() +\n  scale_color_manual(values = c(\"#1c5253\", \"orange\")) +\n  scale_x_continuous(NULL, breaks = NULL, expand = c(.1, .1)) +\n  scale_y_continuous(NULL, breaks = NULL, expand = c(.1, .1))\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n### counts are poisson distributed\n\n\\begin{align*}\nY_i &\\sim \\text{Poisson}(\\lambda_i) \\\\\n\\text{log}(\\lambda_i) &= \\alpha + \\beta x_i \\\\\n\\lambda_i &= \\text{exp}(\\alpha + \\beta x_i)\n\\end{align*}\n\nYou'll need to be careful about your priors.\n\n---\n\n\\begin{align*}\n\\text{log}(\\lambda_i) &= \\alpha  \\\\\n\\alpha &\\sim \\text{Normal}(0,10)\n\\end{align*}\n\nSimulate this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nn_sim = 1e4\nalpha_prior = rnorm(n_sim, 0, 10)\nlambda_prior = exp(alpha_prior)\ncount_prior = rpois(n_sim, lambda_prior)\nrange(count_prior)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.00000e+00 1.41739e+16\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nmean(count_prior)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.720336e+12\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndata.frame(count = count_prior) %>% \n  ggplot(aes(x = count)) +\n  geom_density() +\n  scale_x_continuous(limits = c(0, 100))\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n\\begin{align*}\n\\text{log}(\\lambda_i) &= \\alpha  \\\\\n\\alpha &\\sim \\text{Normal}(3,.5)\n\\end{align*}\n\nSimulate this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nn_sim = 1e4\nalpha_prior = rnorm(n_sim, 3, .5)\nlambda_prior = exp(alpha_prior)\ncount_prior = rpois(n_sim, lambda_prior)\nrange(count_prior)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1 122\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nmean(count_prior)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22.7839\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndata.frame(count = count_prior) %>% \n  ggplot(aes(x = count)) +\n  geom_density() +\n  scale_x_continuous(limits = c(0, 100))\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n## example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Kline, package = \"rethinking\")\nKline <- Kline\nKline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      culture population contact total_tools mean_TU\n1    Malekula       1100     low          13     3.2\n2     Tikopia       1500     low          22     4.7\n3  Santa Cruz       3600     low          24     4.0\n4         Yap       4791    high          43     5.0\n5    Lau Fiji       7400    high          33     5.0\n6   Trobriand       8000    high          19     4.0\n7       Chuuk       9200    high          40     3.8\n8       Manus      13000     low          28     6.6\n9       Tonga      17500    high          55     5.4\n10     Hawaii     275000     low          71     6.6\n```\n\n\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKline = Kline %>% \n  mutate(\n    P = log(population),\n    contact_id = ifelse( contact == \"high\", 2, 1)\n  )\n```\n:::\n\n\n\nIntercept only model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- brm(\n  data = Kline, \n  family = poisson,\n  total_tools ~ 1, \n  prior = c( prior( normal(3, 0.5), class = Intercept) ),\n  iter = 2000, warmup = 1000, chains = 4, cores = 4, \n  seed = 11,\n  file = here(\"files/data/generated_data/m52.1\")\n)\n```\n:::\n\n\n\n---\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKline = Kline %>% \n  mutate(\n    P = log(population),\n    contact_id = ifelse( contact == \"high\", 2, 1)\n  )\n```\n:::\n\n\n\nInteraction  model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 <- brm(\n  data = Kline, \n  family = poisson,\n  bf(total_tools ~ a + b*P, \n     a + b ~ 0 + contact,\n     nl = TRUE), \n  prior = c( prior( normal(3, 0.5), nlpar = a),\n             prior( normal(0, 0.2), nlpar = b)),\n  iter = 2000, warmup = 1000, chains = 4, cores = 4, \n  seed = 11,\n  file = here(\"files/data/generated_data/m52.2\")\n)\n```\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson \n  Links: mu = log \nFormula: total_tools ~ 1 \n   Data: Kline (Number of observations: 10) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     3.54      0.05     3.44     3.64 1.00     1716     1970\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson \n  Links: mu = log \nFormula: total_tools ~ a + b * P \n         a ~ 0 + contact\n         b ~ 0 + contact\n   Data: Kline (Number of observations: 10) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\na_contacthigh     2.84      0.47     1.92     3.74 1.00     1378     1405\na_contactlow      1.69      0.29     1.13     2.25 1.00     1439     1323\nb_contacthigh     0.09      0.05    -0.01     0.19 1.00     1399     1489\nb_contactlow      0.19      0.03     0.14     0.25 1.00     1444     1295\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n### What do these mean?\n\nOnce we've moved outside of the Gaussian distribution, your best bet is to push everything back through the posterior. Do NOT try and evaluate the model estimates. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnd <- data.frame(P = 1) # intercept only model\n\nepred_draws(object = m1, newdata = nd) %>% \n  median_qi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n      P  .row .epred .lower .upper .width .point .interval\n  <dbl> <int>  <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n1     1     1   34.6   31.1   38.2   0.95 median qi       \n```\n\n\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnd <-\n  distinct(Kline, contact) %>% \n  expand_grid(P = seq(from = min(Kline$P), \n                            to=max(Kline$P), \n                            length.out = 100))\n\nf2 <- epred_draws(object = m2, newdata = nd) %>% \n  group_by(contact, P) %>% \n  median_qi\n\nf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 8\n   contact     P .epred .lower .upper .width .point .interval\n   <fct>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n 1 high     7.00   31.7   24.9   40.2   0.95 median qi       \n 2 high     7.06   31.9   25.1   40.3   0.95 median qi       \n 3 high     7.11   32.0   25.4   40.3   0.95 median qi       \n 4 high     7.17   32.2   25.6   40.3   0.95 median qi       \n 5 high     7.23   32.4   25.8   40.3   0.95 median qi       \n 6 high     7.28   32.5   26.1   40.4   0.95 median qi       \n 7 high     7.34   32.7   26.3   40.4   0.95 median qi       \n 8 high     7.39   32.8   26.6   40.4   0.95 median qi       \n 9 high     7.45   33.0   26.9   40.5   0.95 median qi       \n10 high     7.51   33.2   27.1   40.5   0.95 median qi       \n# ℹ 190 more rows\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf2 %>% \n  ggplot(aes(x = P)) + \n  geom_ribbon(aes(ymin = .lower, ymax = .upper, fill = contact), \n              alpha = .3) +\n  geom_smooth(aes(y = .epred, color = contact)) +\n  geom_point(data = Kline, aes(y = total_tools, color = contact)) +\n  labs(x = \"log population\", y = \"number of tools\") \n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n---\n\n\n## compare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1  <- add_criterion(m1, \"loo\")\nm2 <- add_criterion(m2, \"loo\")\n\nloo_compare(m1, m2, criterion = \"loo\") %>% print(simplify = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic\nm2   0.0       0.0   -45.7      7.2         8.2   3.4     91.3  14.3   \nm1 -24.9      14.0   -70.6     16.9         7.9   3.5    141.2  33.7   \n```\n\n\n:::\n\n```{.r .cell-code}\nloo(m2) %>% loo::pareto_k_table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPareto k diagnostic values:\n                         Count Pct.    Min. ESS\n(-Inf, 0.7]   (good)     9     90.0%   232     \n   (0.7, 1]   (bad)      0      0.0%   <NA>    \n   (1, Inf)   (very bad) 1     10.0%   <NA>    \n```\n\n\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2k = m2$criteria$loo$pointwise %>% \n  as.data.frame() %>% \n  mutate(culture = Kline$culture) %>% \n  arrange(desc(influence_pareto_k)) %>% \n  mutate_if(is.double, round, digits = 2)\nm2k\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   elpd_loo mcse_elpd_loo p_loo looic influence_pareto_k    culture\n1     -7.12          0.49  3.27 14.24               1.27     Hawaii\n2     -6.44          0.06  1.60 12.87               0.56      Tonga\n3     -9.23          0.05  1.82 18.45               0.43  Trobriand\n4     -3.28          0.01  0.20  6.56               0.29      Manus\n5     -4.51          0.04  0.77  9.02               0.29   Malekula\n6     -3.71          0.02  0.30  7.42               0.26        Yap\n7     -3.12          0.01  0.12  6.23               0.23   Lau Fiji\n8     -2.74          0.01  0.06  5.47               0.17 Santa Cruz\n9     -2.93          0.01  0.04  5.86               0.16      Chuuk\n10    -2.59          0.00  0.03  5.19               0.13    Tikopia\n```\n\n\n:::\n:::\n\n\n\n---\n\nAdding these to our plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nm2k = m2k %>% full_join(Kline)\nlibrary(ggrepel)\nf2 %>% \n  ggplot(aes(x = P)) + \n  geom_ribbon(aes(ymin = .lower, ymax = .upper, fill = contact), \n              alpha = .3) +\n  geom_smooth(aes(y = .epred, color = contact)) +\n  geom_point(data = m2k, \n             aes(y = total_tools, \n                 size = influence_pareto_k,\n                 color = contact)) +\n  geom_text_repel(data = m2k, \n             aes(y = total_tools,\n                 label = culture)) +\n  guides(size = \"none\") +\n  labs(x = \"log population\", y = \"number of tools\") +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n---\n\nNatural scale\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nm2k = m2k %>% full_join(Kline)\nlibrary(ggrepel)\nf2 %>% \n  ggplot(aes(x = P)) + \n  geom_ribbon(aes(ymin = .lower, ymax = .upper, fill = contact), \n              alpha = .3) +\n  geom_smooth(aes(y = .epred, color = contact)) +\n  geom_point(data = m2k, \n             aes(y = total_tools, \n                 size = influence_pareto_k,\n                 color = contact)) +\n  geom_text_repel(data = m2k, \n             aes(y = total_tools,\n                 label = culture)) +\n  scale_x_continuous(trans = \"exp\",\n                     breaks = log(c(0, 50000, 150000, 250000)),\n                     labels = c(0, 50000, 150000, 250000)) +\n  guides(size = \"none\") +\n  labs(x = \"population\", y = \"number of tools\") +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n\n---\n\n## exercise\n\nThe data in `data(Primates301)` are 301 primate species and associated measures. Model the number of observations of social_learning for each species as a function of the log brain size. Use a Poisson distribution for the `social_learning` outcome variable. Interpret the resulting posterior. \n\n---\n\n### solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Primates301, package = \"rethinking\")\nd <- Primates301\nd$B <- log(d$brain)\n\nm4 <- brm(\n  data = d, \n  family = poisson,\n  social_learning ~ 1 + B,\n  prior = c( prior( normal(3,.5), class = Intercept),\n             prior( normal(0, .1), class = b)),\n  iter = 2000, warmup = 1000, chains = 4, cores = 4, \n  seed = 11,\n  file = here(\"files/data/generated_data/m52.4\")\n)\n```\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnd <- expand.grid(\n  B = seq(min(d$B, na.rm=T), max(d$B, na.rm=T), length = 100)\n)\n\nf4 <- epred_draws(m4, nd) %>% \n  with_groups(B, median_qi, .epred)\n\nggplot(f4, aes(x = B, y = .epred)) +\n  geom_ribbon(aes(ymin = .lower, ymax =.upper), alpha = .3) +\n  geom_line() +\n  geom_point(data = d, \n             aes(y = social_learning), \n             alpha = .3, \n             color = \"#1c5253\") +\n  labs(x = \"log brain size\",\n       y = \"social learning\")\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(f4, aes(x = B, y = .epred)) +\n  geom_ribbon(aes(ymin = .lower, ymax =.upper), alpha = .3) +\n  geom_line() +\n  geom_point(data = d, \n             aes(y = social_learning), \n             alpha = .3, \n             color = \"#1c5253\") +\n  scale_x_continuous(trans = \"exp\") +\n  labs(x = \"brain size\",\n       y = \"social learning\")\n```\n\n::: {.cell-output-display}\n![](lecture05-2_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n---\n\nReturning to the tools example, McElreath points to a theoretical issue with the plots. He proposes to solve this with a better representation of the relationship between tools and time.\n\n$$\n\\Delta T = \\alpha P^{\\beta}-\\gamma T\n$$\n\n   - $\\Delta$ = change\n   - $\\alpha$ = innovation rate\n   - $\\beta$ = diminishing returns (elasticity)\n   - $\\gamma$ = rate of loss\n\nIn this case, both $\\alpha$ and $\\beta$ are moderated by contact. \n\nIf you solve for T:\n\n$$\n\\hat{T} = \\frac{\\alpha_CP^{\\beta_C}}{\\gamma}\n$$\n\n---\n\nNote that in this case we're **not** using the log link function. Wild!\nThis is because all our parameters must be positive. There are two ways to do this: the first is to use appropriate priors that constrain the parameters. This is nice for transparency, but computationally more difficult. The other option is to use the exponential function (see on `a`). This code does both.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm3 <-\n  brm(data = Kline, \n      family = poisson(link = \"identity\"),\n      bf(total_tools ~ exp(a) * P^b / g,\n         a + b ~ 0 + contact,\n         g ~ 1,\n         nl = TRUE),\n      prior = c(prior(normal(1, 1), nlpar = a),\n                prior(exponential(1), nlpar = b, lb = 0),\n                prior(exponential(1), nlpar = g, lb = 0)),\n      iter = 2000, warmup = 1000, chains = 4, cores = 4,\n      seed = 11,\n      control = list(adapt_delta = .85),\n      file = here(\"files/data/generated_data/m52.3\"))\n```\n:::\n\n\n\n\n---\n\n### exercise\n\nReturning to the primate example: Some species are studied much more than others. So the number of reported instances of social_learning could be a product of research effort. Use the research_effort variable, specifically its logarithm, as an additional predictor variable. Interpret the coefficient for log research_effort. How does this model differ from the previous one? \n\n",
    "supporting": [
      "lecture05-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}