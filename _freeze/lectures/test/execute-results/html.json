{
  "hash": "267d6bd5f6b646af1d8485b4fb7e9382",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Untitled\"\nformat: \n  revealjs:\n    css: xaringan-themer2.css\n    nature:\n      highlightStyle: solarized-dark\n      highlightLines: true\n      countIncrementalSlides: false\n      mathjax: \"default\"\n---\n\n\n\nWorkspace setup:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nAs we develop more useful models, we'll begin to practice the art of generating models with multiple estimands. An *estimand* is a quantity we want to estimate from the data. Our models may not themselves produce the answer to our central question, so we need to know how to calculate these values from the posterior distributions.\n\n---\n\n## Categories\n\nForget dummy codes. From here on out, we will incorporate categorical causes into our models by using index variables. An **index variable** contains integers that correspond to different categories. The numbers have no inherent meaning -- rather, they stand as placeholders or shorthand for categories. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Howell1\")\nd <- Howell1\nd$sex <- ifelse(d$male == 1, 2, 1) # 1 = female, 2 = male\nhead(d[, c(\"male\", \"sex\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  male sex\n1    1   2\n2    0   1\n3    0   1\n4    1   2\n5    0   1\n6    1   2\n```\n\n\n:::\n:::\n\n\n\n---\n\n### Mathematical model\n\nLet's write a mathematical model to express height in terms of sex. \n\n\\begin{align*}\nh_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &=     \\alpha_{SEX[i]} \\\\\n\\alpha_j &\\sim \\text{Normal}(178, 20)\\text{ for }j = 1..2 \\\\\n\\sigma &\\sim \\text{Uniform}(0, 50)\n\\end{align*}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflist <- alist(\n  height ~ dnorm( mu , sigma) ,\n  mu <- a[sex] ,\n  a[sex] ~ dnorm( 178, 20 ) ,\n  sigma ~ dunif(0, 50)\n)\n```\n:::\n\n\n\n\n---\n\n### Fitting the model using `quap()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- quap(\n  flist, data=d\n)\n\nprecis(m1, depth=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mean        sd     5.5%     94.5%\na[1]  134.90997 1.6068931 132.3418 137.47810\na[2]  142.57122 1.6974252 139.8584 145.28403\nsigma  27.30929 0.8279908  25.9860  28.63258\n```\n\n\n:::\n:::\n\n\n\nHere, we are given the estimates of the parameters specified in our model: the average height of women (`a[1]`) and the average height of men (`a[2]`).  But our question is whether these average heights are different. How do we get that?\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m1 )\nstr(post)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ sigma: num [1:10000] 24.8 27.5 26.7 27.6 26.8 ...\n $ a    : num [1:10000, 1:2] 134 137 133 137 138 ...\n - attr(*, \"source\")= chr \"quap posterior: 10000 samples from m1\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(post$a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]\n[1,] 134.2658 143.4571\n[2,] 136.6686 143.3514\n[3,] 133.2583 139.6301\n[4,] 137.0262 140.7196\n[5,] 138.3196 142.5417\n[6,] 133.3038 142.7986\n```\n\n\n:::\n\n```{.r .cell-code}\npost$diff_fm <- post$a[,1] - post$a[,2]\nprecis(post, depth=2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mean        sd      5.5%      94.5%      histogram\nsigma    27.318192 0.8300218  25.98524  28.642045  ▁▁▁▁▃▅▇▇▃▂▁▁▁\na[1]    134.896104 1.6096003 132.33178 137.463932  ▁▁▁▁▂▅▇▇▅▂▁▁▁\na[2]    142.598742 1.6934542 139.90142 145.304418 ▁▁▁▁▃▇▇▇▃▂▁▁▁▁\ndiff_fm  -7.702639 2.3046739 -11.37235  -4.029824     ▁▁▁▂▇▇▃▁▁▁\n```\n\n\n:::\n:::\n\n\n\n---\n\nWe can create two plots. One is the posterior distributions of average female and male heights and one is the average difference. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- post %>% as.data.frame() %>% \n  pivot_longer(starts_with(\"a\")) %>% \n  mutate(sex = ifelse(name == \"a.1\", \"female\", \"male\")) %>% \n  ggplot(aes(x=value, color = sex)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"height(cm)\") \n\np2 <- post %>% as.data.frame() %>% \n  ggplot(aes(x=diff_fm)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"difference in height(cm)\") \n\n( p1 | p2)\n```\n:::\n\n\n\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](test_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\n\n---\n\nA note that the distributions of the _mean_ heights is not the same as the distribution of heights period. For that, we need the posterior predictive distributions. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_f  <- rnorm(1e4, mean = post$a[,1], sd = post$sigma )\npred_m  <- rnorm(1e4, mean = post$a[,2], sd = post$sigma )\n\npred_post = data.frame(pred_f, pred_m) %>%\n  mutate(diff = pred_f-pred_m)\n\n# plot distributions\np1 <- pred_post %>% pivot_longer(starts_with(\"pred\")) %>% \n  mutate(sex = ifelse(name == \"pred_f\", \"female\", \"male\")) %>% \n  ggplot(aes(x = value, color = sex)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"height (cm)\")\n\n# plot difference\n# Compute density first\ndensity_data <- density(pred_post$diff)\n\n# Convert to a tibble for plotting\ndensity_df <- tibble(\n  x = density_data$x,\n  y = density_data$y,\n  fill_group = ifelse(x < 0, \"male\", \"female\")  # Define fill condition\n)\n\n# Plot with area fill\np2 <- ggplot(density_df, aes(x = x, y = y, fill = fill_group)) +\n  geom_area() +  # Adjust transparency if needed\n  geom_line(linewidth = 1.2, color = \"black\") +  # Keep one continuous curve\n  labs(x = \"Difference in height (F-M)\", y = \"density\") +\n  guides(fill = \"none\")\n\n(p1 | p2)\n```\n:::\n\n\n\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](test_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\n---\n\n## Exercise\n\nIn the `rethinking` package, the dataset `milk` contains information about the composition of milk across primate species, as well as some other facts about those species. The taxonomic membership of each species is included in the variable `clade`; there are four categories.\n\n  1. Create variable in the dataset to assign an index value to each of the 4 categories. \n  2. Standardize the milk energy variable (`kcal.per.g`). \\*\n  3. Write a mathematical model to express the average milk energy (in standardized kilocalories) in each clade. \n\n.footnote[\nYou don't need to be an expert in primate biology to have a sense of what is reasonable for these values after we standardize.\n]\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"milk\")\nstr(milk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t29 obs. of  8 variables:\n $ clade         : Factor w/ 4 levels \"Ape\",\"New World Monkey\",..: 4 4 4 4 4 2 2 2 2 2 ...\n $ species       : Factor w/ 29 levels \"A palliata\",\"Alouatta seniculus\",..: 11 8 9 10 16 2 1 6 28 27 ...\n $ kcal.per.g    : num  0.49 0.51 0.46 0.48 0.6 0.47 0.56 0.89 0.91 0.92 ...\n $ perc.fat      : num  16.6 19.3 14.1 14.9 27.3 ...\n $ perc.protein  : num  15.4 16.9 16.9 13.2 19.5 ...\n $ perc.lactose  : num  68 63.8 69 71.9 53.2 ...\n $ mass          : num  1.95 2.09 2.51 1.62 2.19 5.25 5.37 2.51 0.71 0.68 ...\n $ neocortex.perc: num  55.2 NA NA NA NA ...\n```\n\n\n:::\n\n```{.r .cell-code}\nmilk$clade_id <- as.integer(milk$clade)\nmilk$K <- standardize(milk$kcal.per.g)\n```\n:::\n\n\n\n\n\\begin{align*}\nK_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha_{\\text{CLAUDE}[i]} \\\\\n\\alpha_i &\\sim \\text{Normal}(0, 0.5) \\text{ for }j=1..4 \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align*}\n\n\n**Exercise:** Now fit your model using `quap()`. It's ok if your mathematical model is a bit different from mine.\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflist <- alist(\n  K ~ dnorm( mu , sigma ) ,\n  mu <- a[clade_id] , \n  a[clade_id] ~ dnorm( 0 , 0.5 ) , \n  sigma ~ dexp( 1 )\n)\n\nm2 <- quap(\n  flist, data = milk\n)\n\nprecis( m2, depth=2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            mean         sd        5.5%      94.5%\na[1]  -0.4843462 0.21764142 -0.83217927 -0.1365132\na[2]   0.3662508 0.21705910  0.01934838  0.7131531\na[3]   0.6752208 0.25753425  0.26363134  1.0868103\na[4]  -0.5858054 0.27450929 -1.02452421 -0.1470865\nsigma  0.7196460 0.09653362  0.56536660  0.8739253\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n### Plotting with `rethinking`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabels <- paste( \"a[\" , 1:4, \"]:\", levels(milk$clade),  sep=\"\" )\nplot(\n  precis(m2, depth=2, pars = \"a\"),\n  labels=labels, \n  xlab=\"expected kcal (std)\"\n)\n```\n\n::: {.cell-output-display}\n![](test_files/figure-revealjs/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n\n---\n\n### Exercise\n\nPlot the following distributions:\n\n * Posterior distribution of average milk energy by clade. \n * Posterior distribution of predicted milk energy values by clade. \n \n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m2 )\nnames(labels) = paste(\"a.\", 1:4, sep = \"\")\npost %>% as.data.frame() %>% \n  pivot_longer(starts_with(\"a\")) %>% \n  mutate(name = recode(name, !!!labels)) %>% \n  ggplot(aes(x = value, color = name)) +\n  geom_density(linewidth = 2)\n```\n\n::: {.cell-output-display}\n![](test_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m2 )\na.1 = rnorm(1e4, post$a[,1], post$sigma)\na.2 = rnorm(1e4, post$a[,2], post$sigma)\na.3 = rnorm(1e4, post$a[,3], post$sigma)\na.4 = rnorm(1e4, post$a[,4], post$sigma)\ndata.frame(a.1, a.2, a.3, a.4) %>% \n  pivot_longer(everything()) %>% \n  mutate(name = recode(name, !!!labels)) %>% \n  ggplot(aes(x = value, color = name)) +\n  geom_density(linewidth = 2)\n```\n\n::: {.cell-output-display}\n![](test_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}