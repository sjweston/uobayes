{
  "hash": "a4762f75e1429846ddf6a2cebc93a907",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 2: Linear models and causal inference\"\nsubtitle: \"Categories and curves\"\nformat: \n  revealjs:\n    css: xaringan-themer2.css\n    nature:\n      highlightStyle: solarized-dark\n      highlightLines: true\n      countIncrementalSlides: false\n      mathjax: \"default\"\n    self-contained: false  # Ensures correct embedding\n    embed-resources: true  # Embeds required assets\n    slide-number: true\n---\n\n\n\nWorkspace setup:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(rethinking)\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nAs we develop more useful models, we'll begin to practice the art of generating models with multiple estimands. An *estimand* is a quantity we want to estimate from the data. Our models may not themselves produce the answer to our central question, so we need to know how to calculate these values from the posterior distributions.\n\nThis is going to be different from prior regression courses (PSY 612), where our models were often designed to give us precisely what we wanted. For example, consider the regression:\n\n$$\n\\hat{Y} = b_0 + b_1(D)\n$$\nWhere $Y$ is a continuous outcome and $D$ is a dummy coded variable (0 = control; 1 = treatment).\n\n  * What does $b_0$ represent? \n  * What does $b_1$ represent? \n  * How would you calculate or estimate the means of both groups from this model?\n\n------------------------------------------------------------------------\n\n## Categories\n\nForget dummy codes. From here on out, we will incorporate categorical causes into our models by using index variables. An **index variable** contains integers that correspond to different categories. The numbers have no inherent meaning -- rather, they stand as placeholders or shorthand for categories.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Howell1\")\nd <- Howell1\nlibrary(measurements)\nd$height <- conv_unit(d$height, from = \"cm\", to = \"feet\")\nd$weight <- conv_unit(d$weight, from = \"kg\", to = \"lbs\")\nd <- d[d$age >= 18, ]\nd$sex <- ifelse(d$male == 1, 2, 1) # 1 = female, 2 = male\nhead(d[, c(\"male\", \"sex\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  male sex\n1    1   2\n2    0   1\n3    0   1\n4    1   2\n5    0   1\n6    1   2\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Mathematical model\n\nLet's write a mathematical model to express weight in terms of sex.\n\n\\begin{align*}\nw_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &=     \\alpha_{SEX[i]} \\\\\n\\alpha_j &\\sim \\text{Normal}(130, 20)\\text{ for }j = 1..2 \\\\\n\\sigma &\\sim \\text{Uniform}(0, 50)\n\\end{align*}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflist <- alist(\n  weight ~ dnorm( mu , sigma) ,\n  mu <- a[sex] ,\n  a[sex] ~ dnorm( 130, 20 ) ,\n  sigma ~ dunif(0, 50)\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Fitting the model using `quap()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- quap( flist, data=d )\nprecis(m1, depth=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mean        sd      5.5%     94.5%\na[1]   92.25778 0.8841999  90.84465  93.67090\na[2]  107.17390 0.9411695 105.66973 108.67807\nsigma  12.10285 0.4561562  11.37382  12.83188\n```\n\n\n:::\n:::\n\n\n\nHere, we are given the estimates of the parameters specified in our model: the average weight of women (`a[1]`) and the average weight of men (`a[2]`). But our question is whether these average weights are different. How do we get that?\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m1 )\nstr(post)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ sigma: num [1:10000] 11 12.1 11.7 12.5 11.8 ...\n $ a    : num [1:10000, 1:2] 91.3 92.3 93 90.9 92.1 ...\n - attr(*, \"source\")= chr \"quap posterior: 10000 samples from m1\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(post$a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]\n[1,] 91.33986 108.7891\n[2,] 92.25883 107.4387\n[3,] 93.04045 107.2987\n[4,] 90.90761 108.3809\n[5,] 92.08847 106.5157\n[6,] 92.88008 106.5985\n```\n\n\n:::\n\n```{.r .cell-code}\npost$diff_fm <- post$a[,1] - post$a[,2]\nprecis(post, depth=2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             mean        sd      5.5%     94.5%       histogram\nsigma    12.10268 0.4508951  11.38862  12.81747        ▁▁▂▇▇▃▁▁\na[1]     92.23226 0.8899818  90.78476  93.64546 ▁▁▁▁▂▃▇▇▇▃▂▁▁▁▁\na[2]    107.17433 0.9455844 105.65103 108.69716        ▁▁▂▇▇▃▁▁\ndiff_fm -14.94207 1.2950456 -17.03328 -12.87254     ▁▁▁▃▇▇▃▂▁▁▁\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Calculate the contrast\n\nWe can create two plots. One is the posterior distributions of average female and male weights and one is the average difference.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- post %>% as.data.frame() %>% \n  pivot_longer(starts_with(\"a\")) %>% \n  mutate(sex = ifelse(name == \"a.1\", \"female\", \"male\")) %>% \n  ggplot(aes(x=value, color = sex)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"weight(lbs)\") \n\np2 <- post %>% as.data.frame() %>% \n  ggplot(aes(x=diff_fm)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"difference in weight(lbs)\") \n\n( p1 | p2)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell layout-align=\"center\" fig.weight='5'}\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Expected values vs predicted values\n\nA note that the distributions of the *mean* weights is not the same as the distribution of weights period. For that, we need the posterior predictive distributions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_f  <- rnorm(1e4, mean = post$a[,1], sd = post$sigma )\npred_m  <- rnorm(1e4, mean = post$a[,2], sd = post$sigma )\n\npred_post = data.frame(pred_f, pred_m) %>%\n  mutate(diff = pred_f-pred_m)\n\n# plot distributions\np1 <- pred_post %>% pivot_longer(starts_with(\"pred\")) %>% \n  mutate(sex = ifelse(name == \"pred_f\", \"female\", \"male\")) %>% \n  ggplot(aes(x = value, color = sex)) +\n  geom_density(linewidth = 2) +\n  labs(x = \"weight (lbs)\")\n\n# plot difference\n# Compute density first\ndensity_data <- density(pred_post$diff)\n\n# Convert to a tibble for plotting\ndensity_df <- tibble(\n  x = density_data$x,\n  y = density_data$y,\n  fill_group = ifelse(x < 0, \"male\", \"female\")  # Define fill condition\n)\n\n# Plot with area fill\np2 <- ggplot(density_df, aes(x = x, y = y, fill = fill_group)) +\n  geom_area() +  # Adjust transparency if needed\n  geom_line(linewidth = 1.2, color = \"black\") +  # Keep one continuous curve\n  labs(x = \"Difference in weight (F-M)\", y = \"density\") +\n  guides(fill = \"none\")\n\n(p1 | p2)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell layout-align=\"center\" fig.weight='5'}\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## exercise\n\nIn the `rethinking` package, the dataset `milk` contains information about the composition of milk across primate species, as well as some other facts about those species. The taxonomic membership of each species is included in the variable `clade`; there are four categories.\n\n1.  Create variable in the dataset to assign an index value to each of the 4 categories.\n2.  Standardize the milk energy variable (`kcal.per.g`). [^lecture02-2-1]\n3.  Write a mathematical model to express the average milk energy (in standardized kilocalories) in each clade.\n\n------------------------------------------------------------------------\n\n### solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"milk\")\nstr(milk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t29 obs. of  8 variables:\n $ clade         : Factor w/ 4 levels \"Ape\",\"New World Monkey\",..: 4 4 4 4 4 2 2 2 2 2 ...\n $ species       : Factor w/ 29 levels \"A palliata\",\"Alouatta seniculus\",..: 11 8 9 10 16 2 1 6 28 27 ...\n $ kcal.per.g    : num  0.49 0.51 0.46 0.48 0.6 0.47 0.56 0.89 0.91 0.92 ...\n $ perc.fat      : num  16.6 19.3 14.1 14.9 27.3 ...\n $ perc.protein  : num  15.4 16.9 16.9 13.2 19.5 ...\n $ perc.lactose  : num  68 63.8 69 71.9 53.2 ...\n $ mass          : num  1.95 2.09 2.51 1.62 2.19 5.25 5.37 2.51 0.71 0.68 ...\n $ neocortex.perc: num  55.2 NA NA NA NA ...\n```\n\n\n:::\n\n```{.r .cell-code}\nmilk$clade_id <- as.integer(milk$clade)\nmilk$K <- standardize(milk$kcal.per.g)\n```\n:::\n\n\n\n\\begin{align*}\nK_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha_{\\text{CLADE}[i]} \\\\\n\\alpha_i &\\sim \\text{Normal}(0, 0.5) \\text{ for }j=1..4 \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align*}\n\n**Exercise:** Now fit your model using `quap()`. It's ok if your mathematical model is a bit different from mine.\n\n------------------------------------------------------------------------\n\n### solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflist <- alist(\n  K ~ dnorm( mu , sigma ) ,\n  mu <- a[clade_id] , \n  a[clade_id] ~ dnorm( 0 , 0.5 ) , \n  sigma ~ dexp( 1 )\n)\n\nm2 <- quap(\n  flist, data = milk\n)\n\nprecis( m2, depth=2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            mean         sd        5.5%      94.5%\na[1]  -0.4843499 0.21764135 -0.83218279 -0.1365170\na[2]   0.3662533 0.21705907  0.01935096  0.7131556\na[3]   0.6752225 0.25753421  0.26363311  1.0868119\na[4]  -0.5858096 0.27450917 -1.02452826 -0.1470909\nsigma  0.7196460 0.09653364  0.56536663  0.8739254\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Plotting with `rethinking`\n\n\n\n::: {.cell fig.weight='5'}\n\n```{.r .cell-code}\nlabels <- paste( \"a[\" , 1:4, \"]:\", levels(milk$clade),  sep=\"\" )\nplot(\n  precis(m2, depth=2, pars = \"a\"),\n  labels=labels, \n  xlab=\"expected kcal (std)\"\n)\n```\n\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### exercise\n\nPlot the following distributions:\n\n-   Posterior distribution of average milk energy by clade.\n-   Posterior distribution of predicted milk energy values by clade.\n\n------------------------------------------------------------------------\n\n### solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m2 )\nnames(labels) = paste(\"a.\", 1:4, sep = \"\")\npost %>% as.data.frame() %>% \n  pivot_longer(starts_with(\"a\")) %>% \n  mutate(name = recode(name, !!!labels)) %>% \n  ggplot(aes(x = value, color = name)) +\n  geom_density(linewidth = 2) +\n  labs(title = \"Posterior distribution of expected milk energy\")\n```\n\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- extract.samples( m2 )\na.1 = rnorm(1e4, post$a[,1], post$sigma)\na.2 = rnorm(1e4, post$a[,2], post$sigma)\na.3 = rnorm(1e4, post$a[,3], post$sigma)\na.4 = rnorm(1e4, post$a[,4], post$sigma)\ndata.frame(a.1, a.2, a.3, a.4) %>% \n  pivot_longer(everything()) %>% \n  mutate(name = recode(name, !!!labels)) %>% \n  ggplot(aes(x = value, color = name)) +\n  geom_density(linewidth = 2) +\n  labs(title = \"Posterior distribution of predicted milk energy\")\n```\n\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Combining index variables and slopes\n\nLet's return to the weight example. What if we want to control for height?\n\n\\begin{align*}\nw_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha_{S[i]} + \\beta_{S[i]}(H_i-\\bar{H})\\\\\n\\alpha_j &\\sim \\text{Normal}(130, 20)\\text{ for }j = 1..2 \\\\\n\\beta_j &\\sim \\text{Normal}(0, 25)\\text{ for }j = 1..2 \\\\\n\\sigma &\\sim \\text{Uniform}(0, 50)\n\\end{align*}\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- list(\n  weight = d$weight,\n  height = d$height,\n  Hbar <- mean(d$height),\n  sex = d$male + 1\n)\n\nflist <- alist(\n  weight ~ dnorm( mu , sigma) ,\n  mu <- a[sex] + b[sex]*(height-Hbar),\n  a[sex] ~ dnorm( 150, 20 ) ,\n  b[sex] ~ dnorm( 0, 25 ) ,\n  sigma ~ dunif(0, 50)\n)\n\nm3 <- quap(flist, data=dat)\n```\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecis(m3, depth=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mean        sd      5.5%      94.5%\na[1]  99.471403 0.9579446 97.940423 101.002384\na[2]  99.607748 1.0007779 98.008311 101.207184\nb[1]  43.338468 4.0421564 36.878321  49.798614\nb[2]  40.107233 3.6519552 34.270704  45.943763\nsigma  9.323176 0.3515417  8.761345   9.885008\n```\n\n\n:::\n\n```{.r .cell-code}\npost <- extract.samples(m3)\nstr(post)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ sigma: num [1:10000] 9.64 9.32 9.6 9.64 9.8 ...\n $ a    : num [1:10000, 1:2] 98.9 98.5 99.5 99.2 99.3 ...\n $ b    : num [1:10000, 1:2] 39.2 38.5 35 44.7 40.1 ...\n - attr(*, \"source\")= chr \"quap posterior: 10000 samples from m3\"\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nPlot the slopes using `extract.samples()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxbar = mean(d$height) # need this because we centered\npost <- extract.samples(m3) # sample intercepts and slopes from the posterior\nplot(d$weight ~ d$height, cex=0.5, pch=16, col=col.alpha(\"darkgrey\",0.5),\n     xlab = \"height\", ylab = \"weight\")\n#plot the lines implied by the first 50 draws from the posterior\nfor(i in 1:50){\n curve(post$a[i, 1] +post$b[i, 1]*(x-xbar), \n       add = T,\n       col=col.alpha(\"#1c5253\",0.1))  \n  curve(post$a[i, 2] +post$b[i, 2]*(x-xbar), \n       add = T,\n       col=col.alpha(\"#e07a5f\",0.1))  \n}\n```\n\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nPlot the slopes using `link()`. (Run this yourself and open up the objects `muF` and `muM` to determine what the `link()` function is doing.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxseq <- seq( min(d$height), max(d$height), len=100) # some values for X\nplot(d$weight ~ d$height, cex=0.5, pch=16, col=col.alpha(\"darkgrey\",0.3),\n     xlim = range(d$height), ylim = range(d$weight), \n     xlab = \"height\", ylab = \"weight\")\nmuF <- link(m3, data=list(sex=rep(1,100), height=xseq, Hbar = mean(d$height)))\nlines(xseq, apply(muF, 2, mean), lwd = 2, col = \"#1c5253\" )\nmuM <- link(m3, data=list(sex=rep(2,100), height=xseq, Hbar = mean(d$height)))\nlines(xseq, apply(muM, 2, mean), lwd = 2, col =  \"#e07a5f\")\n```\n\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### exercise\n\nReturn to the `milk` data. Write a mathematical model expressing the energy of milk as a function of the species body mass (`mass`) and clade category. Be sure to include priors. Fit your model using `quap()`.\n\n------------------------------------------------------------------------\n\n### solution\n\n\\begin{align*}\nK_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha_{\\text{CLADE}[i]} + \\beta_{\\text{CLADE}[i]}(M-\\bar{M})\\\\\n\\alpha_i &\\sim \\text{Normal}(0, 0.5) \\text{ for }j=1..4 \\\\\n\\beta_i &\\sim \\text{Normal}(0, 0.5) \\text{ for }j=1..4 \\\\\n\\sigma &\\sim \\text{Exponential}(1) \\\\\n\\end{align*}\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- list(\n  K        = standardize(milk$kcal.per.g),\n  M        = milk$mass,\n  Mbar     = mean(milk$mass),\n  clade_id = milk$clade_id\n)\n\nflist <- alist(\n  K ~ dnorm( mu , sigma ) ,\n  mu <- a[clade_id] +b[clade_id]*(M-Mbar), \n  a[clade_id] ~ dnorm( 0 , 0.5 ) , \n  b[clade_id] ~ dnorm( 0 , 0.5 ) , \n  sigma ~ dexp( 1 )\n)\n\nm4 <- quap(\n  flist, data = dat\n)\n```\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecis( m4, depth=2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mean          sd        5.5%        94.5%\na[1]  -0.434267103 0.261119127 -0.85158590 -0.016948306\na[2]  -0.282796279 0.478554305 -1.04761849  0.482025928\na[3]   0.368829602 0.418885891 -0.30063096  1.038290160\na[4]  -0.005063270 0.498109189 -0.80113796  0.791011419\nb[1]  -0.002670452 0.007183324 -0.01415079  0.008809887\nb[2]  -0.061304007 0.040137293 -0.12545115  0.002843139\nb[3]  -0.047925963 0.050277759 -0.12827953  0.032427607\nb[4]   0.064915884 0.046232350 -0.00897234  0.138804109\nsigma  0.692512121 0.092025313  0.54543790  0.839586344\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxseq <- seq( min(milk$mass), max(milk$mass), len=100)\nMbar = mean(milk$mass)\ncustom_colors = c(\"#1c5253\", \"#e07a5f\", \"#f2cc8f\", \"#81b29a\")\ncolors = custom_colors[milk$clade_id]\nplot(milk$K ~ milk$mass, col = colors, \n     pch = 16,\n     xlim = range(milk$mass), ylim = range(milk$K), \n     xlab = \"height\", ylab = \"weight\")\nmu1 <- \n  link(m4, data=list(clade_id=rep(1,100), M=xseq, Mbar = Mbar))\nlines(xseq, apply(mu1, 2, mean), lwd = 2, col = \"#1c5253\" )\nmu2 <- \n  link(m4, data=list(clade_id=rep(2,100), M=xseq, Mbar = Mbar))\nlines(xseq, apply(mu2, 2, mean), lwd = 2, col = \"#e07a5f\" )\nmu3 <- \n  link(m4, data=list(clade_id=rep(3,100), M=xseq, Mbar = Mbar))\nlines(xseq, apply(mu3, 2, mean), lwd = 2, col = \"#f2cc8f\" )\nmu4 <- \n  link(m4, data=list(clade_id=rep(4,100), M=xseq, Mbar = Mbar))\nlines(xseq, apply(mu4, 2, mean), lwd = 2, col = \"#81b29a\" )\nlegend(\"topright\", legend = levels(milk$clade), \n       col = custom_colors, pch = 16)\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell fig.weight='12'}\n::: {.cell-output-display}\n![](lecture02-2_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n:::\n:::::\n\n[^lecture02-2-1]: You don't need to be an expert in primate biology to have a sense of what is reasonable for these values after we standardize.\n\n",
    "supporting": [
      "lecture02-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}