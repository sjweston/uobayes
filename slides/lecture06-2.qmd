---
title: "week 6: multilevel models"
subtitle: "multilevel tadpoles"
format: 
  revealjs:
    css: xaringan-themer2.css
    nature:
      highlightStyle: solarized-dark
      highlightLines: true
      countIncrementalSlides: false
      mathjax: "default"
    self-contained: false  # Ensures correct embedding
    embed-resources: true  # Embeds required assets
    slide-number: true
    code-annotations: hover
execute:
  echo: false        
---

```{r, message = F, warning = F}
library(tidyverse)
library(janitor)
library(cowplot)
library(patchwork)
library(here)
library(brms) 
library(tidybayes) 
```

```{r, echo = F}
knitr::opts_chunk$set(fig.retina=3, echo=TRUE)
theme_set(theme_cowplot())
default_palettes <- list(
  c("#5e8485" , "#0f393a") ,
  c("#1c5253" , "#5e8485" , "#0f393a") , 
  # palette with 5 colours
 c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" ) ,
  # same palette interpolated to 8 colours
 c( "#1c5253" , "#e07a5f", "#f2cc8f" , "#81b29a" , "#3d405b" , "#a7a844" , "#69306d" ) 
  
)

options(ggplot2.discrete.fill = default_palettes, 
        ggplot2.discrete.colour = default_palettes)
```

## multilevel models

We're starting our unit on multilevel models, which can be thought of as models that "remember" features of clusters of data as they learn about all the clusters.  The model will pool information across clusters (e.g., our estimates about cluster A will be informed in part by clusters B, C, and D). This tends to improve estimates about each cluster. Here are some other benefits of multilevel modeling:

  1. **improved estimates for repeated sampling.** If you try to fit a single-level model to these data, you'll over- or under-fit the data. 
  2. **improved estimates for imbalance in sampling.** prevent over-sampled clusters from dominating inference, while also balancing the fact that larger clusters have more information.
  3. **estimates of variation.** model variation explicitly!
  4. **avoid averaging, retain variation.** averaging manufactures false confidence (artificially inflates precision) and introduces arbitrary data transformations. 
  
Multilevel modeling should be your default approach.

---

## example: multilevel people


```{r}
data_path = "https://raw.githubusercontent.com/sjweston/uobayes/refs/heads/main/files/data/external_data/mlm.csv"
d <- read.csv(data_path)

rethinking::precis(d)
```

---

```{r}
#| code-fold: true
set.seed(114)
sample_id = sample(unique(d$id), replace=F, size=20)
d %>%
  filter(id %in% sample_id) %>% 
  ggplot(aes(x = week, y = con, group = id, fill = id)) + 
  geom_point(aes(color = factor(id))) + 
  stat_smooth(aes(color = factor(id)),
              method = "lm", se = FALSE) +
  theme(legend.position = "none")
```


